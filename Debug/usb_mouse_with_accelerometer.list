
usb_mouse_with_accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa4  08007aa4  00009128  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa4  08007aa4  00008aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aac  08007aac  00009128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ab0  08007ab0  00008ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08007ab4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009128  2**0
                  CONTENTS
 10 .bss          00000abc  20000128  20000128  00009128  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000be4  20000be4  00009128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8a2  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6a  00000000  00000000  000189fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0001b768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009de  00000000  00000000  0001c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb6  00000000  00000000  0001ce86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116d9  00000000  00000000  0003fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c640b  00000000  00000000  00051115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117520  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035b0  00000000  00000000  00117564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0011ab14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000128 	.word	0x20000128
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a40 	.word	0x08007a40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000012c 	.word	0x2000012c
 80001c4:	08007a40 	.word	0x08007a40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 80004cc:	2200      	movs	r2, #0
 80004ce:	2108      	movs	r1, #8
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <LIS3DSH_WriteIO+0x4c>)
 80004d2:	f001 f90d 	bl	80016f0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80004d6:	f107 010f 	add.w	r1, r7, #15
 80004da:	230a      	movs	r3, #10
 80004dc:	2201      	movs	r2, #1
 80004de:	480a      	ldr	r0, [pc, #40]	@ (8000508 <LIS3DSH_WriteIO+0x50>)
 80004e0:	f003 f86b 	bl	80035ba <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	230a      	movs	r3, #10
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <LIS3DSH_WriteIO+0x50>)
 80004ee:	f003 f864 	bl	80035ba <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <LIS3DSH_WriteIO+0x4c>)
 80004f8:	f001 f8fa 	bl	80016f0 <HAL_GPIO_WritePin>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	20000144 	.word	0x20000144

0800050c <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000522:	b2db      	uxtb	r3, r3
 8000524:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000526:	2200      	movs	r2, #0
 8000528:	2108      	movs	r1, #8
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <LIS3DSH_ReadIO+0x80>)
 800052c:	f001 f8e0 	bl	80016f0 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000530:	f107 0108 	add.w	r1, r7, #8
 8000534:	230a      	movs	r3, #10
 8000536:	2201      	movs	r2, #1
 8000538:	4815      	ldr	r0, [pc, #84]	@ (8000590 <LIS3DSH_ReadIO+0x84>)
 800053a:	f003 f83e 	bl	80035ba <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	b29a      	uxth	r2, r3
 8000542:	f107 0108 	add.w	r1, r7, #8
 8000546:	230a      	movs	r3, #10
 8000548:	4811      	ldr	r0, [pc, #68]	@ (8000590 <LIS3DSH_ReadIO+0x84>)
 800054a:	f003 f97a 	bl	8003842 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 800054e:	2201      	movs	r2, #1
 8000550:	2108      	movs	r1, #8
 8000552:	480e      	ldr	r0, [pc, #56]	@ (800058c <LIS3DSH_ReadIO+0x80>)
 8000554:	f001 f8cc 	bl	80016f0 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]
 800055c:	e00b      	b.n	8000576 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	6839      	ldr	r1, [r7, #0]
 8000564:	440b      	add	r3, r1
 8000566:	3210      	adds	r2, #16
 8000568:	443a      	add	r2, r7
 800056a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800056e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	3301      	adds	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	7bfa      	ldrb	r2, [r7, #15]
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	429a      	cmp	r2, r3
 8000580:	dbed      	blt.n	800055e <LIS3DSH_ReadIO+0x52>
	}
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	20000144 	.word	0x20000144

08000594 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80005a2:	2258      	movs	r2, #88	@ 0x58
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	485b      	ldr	r0, [pc, #364]	@ (8000714 <LIS3DSH_Init+0x180>)
 80005a8:	f007 fa3c 	bl	8007a24 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	4313      	orrs	r3, r2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	f023 030f 	bic.w	r3, r3, #15
 80005ce:	b25a      	sxtb	r2, r3
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80005dc:	f107 030f 	add.w	r3, r7, #15
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	2020      	movs	r0, #32
 80005e6:	f7ff ff67 	bl	80004b8 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000610:	b25a      	sxtb	r2, r3
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800061e:	f107 030f 	add.w	r3, r7, #15
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	2024      	movs	r0, #36	@ 0x24
 8000628:	f7ff ff46 	bl	80004b8 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000634:	2388      	movs	r3, #136	@ 0x88
 8000636:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	2023      	movs	r0, #35	@ 0x23
 8000642:	f7ff ff39 	bl	80004b8 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d858      	bhi.n	8000700 <LIS3DSH_Init+0x16c>
 800064e:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <LIS3DSH_Init+0xc0>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	080006d9 	.word	0x080006d9
 8000658:	08000701 	.word	0x08000701
 800065c:	08000701 	.word	0x08000701
 8000660:	08000701 	.word	0x08000701
 8000664:	08000701 	.word	0x08000701
 8000668:	08000701 	.word	0x08000701
 800066c:	08000701 	.word	0x08000701
 8000670:	08000701 	.word	0x08000701
 8000674:	080006e1 	.word	0x080006e1
 8000678:	08000701 	.word	0x08000701
 800067c:	08000701 	.word	0x08000701
 8000680:	08000701 	.word	0x08000701
 8000684:	08000701 	.word	0x08000701
 8000688:	08000701 	.word	0x08000701
 800068c:	08000701 	.word	0x08000701
 8000690:	08000701 	.word	0x08000701
 8000694:	080006e9 	.word	0x080006e9
 8000698:	08000701 	.word	0x08000701
 800069c:	08000701 	.word	0x08000701
 80006a0:	08000701 	.word	0x08000701
 80006a4:	08000701 	.word	0x08000701
 80006a8:	08000701 	.word	0x08000701
 80006ac:	08000701 	.word	0x08000701
 80006b0:	08000701 	.word	0x08000701
 80006b4:	080006f1 	.word	0x080006f1
 80006b8:	08000701 	.word	0x08000701
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000701 	.word	0x08000701
 80006c4:	08000701 	.word	0x08000701
 80006c8:	08000701 	.word	0x08000701
 80006cc:	08000701 	.word	0x08000701
 80006d0:	08000701 	.word	0x08000701
 80006d4:	080006f9 	.word	0x080006f9
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <LIS3DSH_Init+0x188>)
 80006dc:	601a      	str	r2, [r3, #0]
			break;
 80006de:	e00f      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <LIS3DSH_Init+0x18c>)
 80006e4:	601a      	str	r2, [r3, #0]
			break;
 80006e6:	e00b      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <LIS3DSH_Init+0x190>)
 80006ec:	601a      	str	r2, [r3, #0]
			break;
 80006ee:	e007      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LIS3DSH_Init+0x194>)
 80006f4:	601a      	str	r2, [r3, #0]
			break;
 80006f6:	e003      	b.n	8000700 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <LIS3DSH_Init+0x184>)
 80006fa:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <LIS3DSH_Init+0x198>)
 80006fc:	601a      	str	r2, [r3, #0]
			break;
 80006fe:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	480a      	ldr	r0, [pc, #40]	@ (8000730 <LIS3DSH_Init+0x19c>)
 8000706:	f000 fff3 	bl	80016f0 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000144 	.word	0x20000144
 8000718:	20000000 	.word	0x20000000
 800071c:	3d75c28f 	.word	0x3d75c28f
 8000720:	3df5c28f 	.word	0x3df5c28f
 8000724:	3e3851ec 	.word	0x3e3851ec
 8000728:	3e75c28f 	.word	0x3e75c28f
 800072c:	3f3ae148 	.word	0x3f3ae148
 8000730:	40021000 	.word	0x40021000

08000734 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2202      	movs	r2, #2
 8000742:	4619      	mov	r1, r3
 8000744:	2028      	movs	r0, #40	@ 0x28
 8000746:	f7ff fee1 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800074a:	7d7b      	ldrb	r3, [r7, #21]
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b29b      	uxth	r3, r3
 8000750:	7d3a      	ldrb	r2, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	b21b      	sxth	r3, r3
 8000758:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2202      	movs	r2, #2
 8000760:	4619      	mov	r1, r3
 8000762:	202a      	movs	r0, #42	@ 0x2a
 8000764:	f7ff fed2 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000768:	7d7b      	ldrb	r3, [r7, #21]
 800076a:	021b      	lsls	r3, r3, #8
 800076c:	b29b      	uxth	r3, r3
 800076e:	7d3a      	ldrb	r2, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	b29b      	uxth	r3, r3
 8000774:	b21b      	sxth	r3, r3
 8000776:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2202      	movs	r2, #2
 800077e:	4619      	mov	r1, r3
 8000780:	202c      	movs	r0, #44	@ 0x2c
 8000782:	f7ff fec3 	bl	800050c <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8000786:	7d7b      	ldrb	r3, [r7, #21]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	7d3a      	ldrb	r2, [r7, #20]
 800078e:	4413      	add	r3, r2
 8000790:	b29b      	uxth	r3, r3
 8000792:	b21b      	sxth	r3, r3
 8000794:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	461a      	mov	r2, r3
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	6010      	str	r0, [r2, #0]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	8093      	strh	r3, [r2, #4]
	
}
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <LIS3DSH_PollDRDY>:
	
	return tempScaledData;
}
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 80007b6:	f000 fcbd 	bl	8001134 <HAL_GetTick>
 80007ba:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 80007bc:	f107 030b 	add.w	r3, r7, #11
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	2027      	movs	r0, #39	@ 0x27
 80007c6:	f7ff fea1 	bl	800050c <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10d      	bne.n	80007f0 <LIS3DSH_PollDRDY+0x42>
		
	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d109      	bne.n	80007f2 <LIS3DSH_PollDRDY+0x44>
 80007de:	f000 fca9 	bl	8001134 <HAL_GetTick>
 80007e2:	4602      	mov	r2, r0
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d8e6      	bhi.n	80007bc <LIS3DSH_PollDRDY+0xe>
 80007ee:	e000      	b.n	80007f2 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 80007f0:	bf00      	nop
	if(Acc_status & 0x07)
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e000      	b.n	8000802 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 8000800:	2300      	movs	r3, #0
	
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <IMU_Calibrate>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//This function basically calculates the drift of IMU in x and y direction
void IMU_Calibrate (void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
	for (int i=0; i<50;)
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	e047      	b.n	80008a8 <IMU_Calibrate+0x9c>
	{
		if(LIS3DSH_PollDRDY(1000) == true){
 8000818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081c:	f7ff ffc7 	bl	80007ae <LIS3DSH_PollDRDY>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d040      	beq.n	80008a8 <IMU_Calibrate+0x9c>
			myAccRawData = LIS3DSH_GetDataRaw();
 8000826:	4c30      	ldr	r4, [pc, #192]	@ (80008e8 <IMU_Calibrate+0xdc>)
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff82 	bl	8000734 <LIS3DSH_GetDataRaw>
 8000830:	4622      	mov	r2, r4
 8000832:	463b      	mov	r3, r7
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	6010      	str	r0, [r2, #0]
 8000838:	889b      	ldrh	r3, [r3, #4]
 800083a:	8093      	strh	r3, [r2, #4]
			min_xval = MIN(min_xval, myAccRawData.x);
 800083c:	4b2a      	ldr	r3, [pc, #168]	@ (80008e8 <IMU_Calibrate+0xdc>)
 800083e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <IMU_Calibrate+0xe0>)
 8000844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000848:	4293      	cmp	r3, r2
 800084a:	bfa8      	it	ge
 800084c:	4613      	movge	r3, r2
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <IMU_Calibrate+0xe0>)
 8000852:	801a      	strh	r2, [r3, #0]
			max_xval = MAX(max_xval, myAccRawData.x);
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <IMU_Calibrate+0xdc>)
 8000856:	f9b3 2000 	ldrsh.w	r2, [r3]
 800085a:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <IMU_Calibrate+0xe4>)
 800085c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000860:	4293      	cmp	r3, r2
 8000862:	bfb8      	it	lt
 8000864:	4613      	movlt	r3, r2
 8000866:	b21a      	sxth	r2, r3
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <IMU_Calibrate+0xe4>)
 800086a:	801a      	strh	r2, [r3, #0]
			min_yval = MIN(min_yval, myAccRawData.y);
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <IMU_Calibrate+0xdc>)
 800086e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <IMU_Calibrate+0xe8>)
 8000874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000878:	4293      	cmp	r3, r2
 800087a:	bfa8      	it	ge
 800087c:	4613      	movge	r3, r2
 800087e:	b21a      	sxth	r2, r3
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <IMU_Calibrate+0xe8>)
 8000882:	801a      	strh	r2, [r3, #0]
			max_yval = MAX(max_yval, myAccRawData.y);
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <IMU_Calibrate+0xdc>)
 8000886:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <IMU_Calibrate+0xec>)
 800088c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000890:	4293      	cmp	r3, r2
 8000892:	bfb8      	it	lt
 8000894:	4613      	movlt	r3, r2
 8000896:	b21a      	sxth	r2, r3
 8000898:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <IMU_Calibrate+0xec>)
 800089a:	801a      	strh	r2, [r3, #0]
			HAL_Delay (10);
 800089c:	200a      	movs	r0, #10
 800089e:	f000 fc55 	bl	800114c <HAL_Delay>
			i++;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<50;)
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b31      	cmp	r3, #49	@ 0x31
 80008ac:	ddb4      	ble.n	8000818 <IMU_Calibrate+0xc>
		}
	}
	//Glow all leds to indicate calibration done
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b4:	4811      	ldr	r0, [pc, #68]	@ (80008fc <IMU_Calibrate+0xf0>)
 80008b6:	f000 ff1b 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c0:	480e      	ldr	r0, [pc, #56]	@ (80008fc <IMU_Calibrate+0xf0>)
 80008c2:	f000 ff15 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <IMU_Calibrate+0xf0>)
 80008ce:	f000 ff0f 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <IMU_Calibrate+0xf0>)
 80008da:	f000 ff09 	bl	80016f0 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001f4 	.word	0x200001f4
 80008ec:	20000004 	.word	0x20000004
 80008f0:	20000006 	.word	0x20000006
 80008f4:	20000008 	.word	0x20000008
 80008f8:	2000000a 	.word	0x2000000a
 80008fc:	40020c00 	.word	0x40020c00

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000906:	f000 fbaf 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090a:	f000 f96d 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fa0b 	bl	8000d28 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000912:	f000 f9d3 	bl	8000cbc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000916:	f006 fc21 	bl	800715c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  myAccConfig.enableAxes = LIS3DSH_XYZ_ENABLE;
 800091a:	2307      	movs	r3, #7
 800091c:	72fb      	strb	r3, [r7, #11]
  myAccConfig.interruptEnable = true;
 800091e:	2301      	movs	r3, #1
 8000920:	733b      	strb	r3, [r7, #12]
  myAccConfig.dataRate = LIS3DSH_DATARATE_12_5;
 8000922:	2330      	movs	r3, #48	@ 0x30
 8000924:	723b      	strb	r3, [r7, #8]
  myAccConfig.fullScale = LIS3DSH_FULLSCALE_2;
 8000926:	2300      	movs	r3, #0
 8000928:	727b      	strb	r3, [r7, #9]
  myAccConfig.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 800092a:	23c0      	movs	r3, #192	@ 0xc0
 800092c:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_Init(&hspi1,&myAccConfig);
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	489f      	ldr	r0, [pc, #636]	@ (8000bb4 <main+0x2b4>)
 8000936:	f7ff fe2d 	bl	8000594 <LIS3DSH_Init>

  IMU_Calibrate();
 800093a:	f7ff ff67 	bl	800080c <IMU_Calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(LIS3DSH_PollDRDY(1000) == true){
 800093e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000942:	f7ff ff34 	bl	80007ae <LIS3DSH_PollDRDY>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f8      	beq.n	800093e <main+0x3e>

		  myAccRawData = LIS3DSH_GetDataRaw();//Get the data from IMU
 800094c:	4c9a      	ldr	r4, [pc, #616]	@ (8000bb8 <main+0x2b8>)
 800094e:	463b      	mov	r3, r7
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff feef 	bl	8000734 <LIS3DSH_GetDataRaw>
 8000956:	4622      	mov	r2, r4
 8000958:	463b      	mov	r3, r7
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	6010      	str	r0, [r2, #0]
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	8093      	strh	r3, [r2, #4]

		  //check if outside drift range then eliminate the drift and store new value back in struct
		  if (myAccRawData.x < min_xval)
 8000962:	4b95      	ldr	r3, [pc, #596]	@ (8000bb8 <main+0x2b8>)
 8000964:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000968:	4b94      	ldr	r3, [pc, #592]	@ (8000bbc <main+0x2bc>)
 800096a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096e:	429a      	cmp	r2, r3
 8000970:	da0d      	bge.n	800098e <main+0x8e>
		   {
		     newxval = myAccRawData.x - min_xval;
 8000972:	4b91      	ldr	r3, [pc, #580]	@ (8000bb8 <main+0x2b8>)
 8000974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b90      	ldr	r3, [pc, #576]	@ (8000bbc <main+0x2bc>)
 800097c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000980:	b29b      	uxth	r3, r3
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b29b      	uxth	r3, r3
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b8d      	ldr	r3, [pc, #564]	@ (8000bc0 <main+0x2c0>)
 800098a:	801a      	strh	r2, [r3, #0]
 800098c:	e014      	b.n	80009b8 <main+0xb8>
		   }

		  else if (myAccRawData.x > max_xval)
 800098e:	4b8a      	ldr	r3, [pc, #552]	@ (8000bb8 <main+0x2b8>)
 8000990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000994:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc4 <main+0x2c4>)
 8000996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800099a:	429a      	cmp	r2, r3
 800099c:	dd0c      	ble.n	80009b8 <main+0xb8>
		   {
		     newxval = myAccRawData.x - max_xval;
 800099e:	4b86      	ldr	r3, [pc, #536]	@ (8000bb8 <main+0x2b8>)
 80009a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b87      	ldr	r3, [pc, #540]	@ (8000bc4 <main+0x2c4>)
 80009a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	4b82      	ldr	r3, [pc, #520]	@ (8000bc0 <main+0x2c0>)
 80009b6:	801a      	strh	r2, [r3, #0]
		   }

		  if (myAccRawData.y < min_yval)
 80009b8:	4b7f      	ldr	r3, [pc, #508]	@ (8000bb8 <main+0x2b8>)
 80009ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009be:	4b82      	ldr	r3, [pc, #520]	@ (8000bc8 <main+0x2c8>)
 80009c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	da0d      	bge.n	80009e4 <main+0xe4>
		  {
		    newyval = myAccRawData.y - min_yval;
 80009c8:	4b7b      	ldr	r3, [pc, #492]	@ (8000bb8 <main+0x2b8>)
 80009ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b7d      	ldr	r3, [pc, #500]	@ (8000bc8 <main+0x2c8>)
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	b21a      	sxth	r2, r3
 80009de:	4b7b      	ldr	r3, [pc, #492]	@ (8000bcc <main+0x2cc>)
 80009e0:	801a      	strh	r2, [r3, #0]
 80009e2:	e014      	b.n	8000a0e <main+0x10e>
		  }

		  else if (myAccRawData.y > max_yval)
 80009e4:	4b74      	ldr	r3, [pc, #464]	@ (8000bb8 <main+0x2b8>)
 80009e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80009ea:	4b79      	ldr	r3, [pc, #484]	@ (8000bd0 <main+0x2d0>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dd0c      	ble.n	8000a0e <main+0x10e>
		  {
		   newyval = myAccRawData.y - max_yval;
 80009f4:	4b70      	ldr	r3, [pc, #448]	@ (8000bb8 <main+0x2b8>)
 80009f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b74      	ldr	r3, [pc, #464]	@ (8000bd0 <main+0x2d0>)
 80009fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	4b70      	ldr	r3, [pc, #448]	@ (8000bcc <main+0x2cc>)
 8000a0c:	801a      	strh	r2, [r3, #0]
		  }

		  myAccRawData.x = newxval;
 8000a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8000bc0 <main+0x2c0>)
 8000a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a14:	4b68      	ldr	r3, [pc, #416]	@ (8000bb8 <main+0x2b8>)
 8000a16:	801a      	strh	r2, [r3, #0]
		  myAccRawData.y = newyval;
 8000a18:	4b6c      	ldr	r3, [pc, #432]	@ (8000bcc <main+0x2cc>)
 8000a1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a1e:	4b66      	ldr	r3, [pc, #408]	@ (8000bb8 <main+0x2b8>)
 8000a20:	805a      	strh	r2, [r3, #2]

		  //glow different leds to indicate the direction of tilt
		  if (myAccRawData.x > 1000){
 8000a22:	4b65      	ldr	r3, [pc, #404]	@ (8000bb8 <main+0x2b8>)
 8000a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a2c:	dd0c      	ble.n	8000a48 <main+0x148>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a34:	4867      	ldr	r0, [pc, #412]	@ (8000bd4 <main+0x2d4>)
 8000a36:	f000 fe5b 	bl	80016f0 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a40:	4864      	ldr	r0, [pc, #400]	@ (8000bd4 <main+0x2d4>)
 8000a42:	f000 fe55 	bl	80016f0 <HAL_GPIO_WritePin>
 8000a46:	e01e      	b.n	8000a86 <main+0x186>
		  }
		  else if (myAccRawData.x < -1000){
 8000a48:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb8 <main+0x2b8>)
 8000a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a4e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000a52:	da0c      	bge.n	8000a6e <main+0x16e>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5a:	485e      	ldr	r0, [pc, #376]	@ (8000bd4 <main+0x2d4>)
 8000a5c:	f000 fe48 	bl	80016f0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a66:	485b      	ldr	r0, [pc, #364]	@ (8000bd4 <main+0x2d4>)
 8000a68:	f000 fe42 	bl	80016f0 <HAL_GPIO_WritePin>
 8000a6c:	e00b      	b.n	8000a86 <main+0x186>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a74:	4857      	ldr	r0, [pc, #348]	@ (8000bd4 <main+0x2d4>)
 8000a76:	f000 fe3b 	bl	80016f0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a80:	4854      	ldr	r0, [pc, #336]	@ (8000bd4 <main+0x2d4>)
 8000a82:	f000 fe35 	bl	80016f0 <HAL_GPIO_WritePin>
		  }

		  if (myAccRawData.y > 1000){
 8000a86:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb8 <main+0x2b8>)
 8000a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a90:	dd0c      	ble.n	8000aac <main+0x1ac>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a98:	484e      	ldr	r0, [pc, #312]	@ (8000bd4 <main+0x2d4>)
 8000a9a:	f000 fe29 	bl	80016f0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa4:	484b      	ldr	r0, [pc, #300]	@ (8000bd4 <main+0x2d4>)
 8000aa6:	f000 fe23 	bl	80016f0 <HAL_GPIO_WritePin>
 8000aaa:	e01e      	b.n	8000aea <main+0x1ea>
		  }
		  else if (myAccRawData.y < -1000){
 8000aac:	4b42      	ldr	r3, [pc, #264]	@ (8000bb8 <main+0x2b8>)
 8000aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000ab6:	da0c      	bge.n	8000ad2 <main+0x1d2>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	4845      	ldr	r0, [pc, #276]	@ (8000bd4 <main+0x2d4>)
 8000ac0:	f000 fe16 	bl	80016f0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aca:	4842      	ldr	r0, [pc, #264]	@ (8000bd4 <main+0x2d4>)
 8000acc:	f000 fe10 	bl	80016f0 <HAL_GPIO_WritePin>
 8000ad0:	e00b      	b.n	8000aea <main+0x1ea>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad8:	483e      	ldr	r0, [pc, #248]	@ (8000bd4 <main+0x2d4>)
 8000ada:	f000 fe09 	bl	80016f0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae4:	483b      	ldr	r0, [pc, #236]	@ (8000bd4 <main+0x2d4>)
 8000ae6:	f000 fe03 	bl	80016f0 <HAL_GPIO_WritePin>
		  }


		  //send the values to mouse object only if outside a range
		  if(myAccRawData.x > 1000 || myAccRawData.x < -1000){
 8000aea:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <main+0x2b8>)
 8000aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000af4:	dc05      	bgt.n	8000b02 <main+0x202>
 8000af6:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <main+0x2b8>)
 8000af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000b00:	da0e      	bge.n	8000b20 <main+0x220>
			  mousehid.y = myAccRawData.x/70;
 8000b02:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <main+0x2b8>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4a33      	ldr	r2, [pc, #204]	@ (8000bd8 <main+0x2d8>)
 8000b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b0e:	441a      	add	r2, r3
 8000b10:	1192      	asrs	r2, r2, #6
 8000b12:	17db      	asrs	r3, r3, #31
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	b25a      	sxtb	r2, r3
 8000b1a:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <main+0x2dc>)
 8000b1c:	709a      	strb	r2, [r3, #2]
 8000b1e:	e002      	b.n	8000b26 <main+0x226>
		  }
		  else mousehid.y = 0;
 8000b20:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <main+0x2dc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	709a      	strb	r2, [r3, #2]

		  if(myAccRawData.y > 1000 || myAccRawData.y < -1000){
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <main+0x2b8>)
 8000b28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b30:	dc05      	bgt.n	8000b3e <main+0x23e>
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <main+0x2b8>)
 8000b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b38:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8000b3c:	da0e      	bge.n	8000b5c <main+0x25c>
			  mousehid.x = myAccRawData.y/70;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <main+0x2b8>)
 8000b40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <main+0x2d8>)
 8000b46:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4a:	441a      	add	r2, r3
 8000b4c:	1192      	asrs	r2, r2, #6
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <main+0x2dc>)
 8000b58:	705a      	strb	r2, [r3, #1]
 8000b5a:	e002      	b.n	8000b62 <main+0x262>
		  }
		  else mousehid.x = 0;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <main+0x2dc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	705a      	strb	r2, [r3, #1]

		  //this checks the button flag set in ISR to replicate mouse click
		  if (button_flag == 1)
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <main+0x2e0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d115      	bne.n	8000b96 <main+0x296>
		  {
			  mousehid.button = 1;  // left click =1, right click =2
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <main+0x2dc>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
			  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000b70:	2204      	movs	r2, #4
 8000b72:	491a      	ldr	r1, [pc, #104]	@ (8000bdc <main+0x2dc>)
 8000b74:	481b      	ldr	r0, [pc, #108]	@ (8000be4 <main+0x2e4>)
 8000b76:	f004 ff67 	bl	8005a48 <USBD_HID_SendReport>
			  HAL_Delay(50);
 8000b7a:	2032      	movs	r0, #50	@ 0x32
 8000b7c:	f000 fae6 	bl	800114c <HAL_Delay>
			  mousehid.button = 0;  // left click =1, right click =2
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <main+0x2dc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
			  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8000b86:	2204      	movs	r2, #4
 8000b88:	4914      	ldr	r1, [pc, #80]	@ (8000bdc <main+0x2dc>)
 8000b8a:	4816      	ldr	r0, [pc, #88]	@ (8000be4 <main+0x2e4>)
 8000b8c:	f004 ff5c 	bl	8005a48 <USBD_HID_SendReport>
			  button_flag = 0;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <main+0x2e0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
		  }

		  USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof(mousehid));
 8000b96:	2204      	movs	r2, #4
 8000b98:	4910      	ldr	r1, [pc, #64]	@ (8000bdc <main+0x2dc>)
 8000b9a:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <main+0x2e4>)
 8000b9c:	f004 ff54 	bl	8005a48 <USBD_HID_SendReport>
		  newxval = 0;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <main+0x2c0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	801a      	strh	r2, [r3, #0]
		  newyval = 0;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <main+0x2cc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f000 facd 	bl	800114c <HAL_Delay>
	  if(LIS3DSH_PollDRDY(1000) == true){
 8000bb2:	e6c4      	b.n	800093e <main+0x3e>
 8000bb4:	2000019c 	.word	0x2000019c
 8000bb8:	200001f4 	.word	0x200001f4
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	20000204 	.word	0x20000204
 8000bc4:	20000006 	.word	0x20000006
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000206 	.word	0x20000206
 8000bd0:	2000000a 	.word	0x2000000a
 8000bd4:	40020c00 	.word	0x40020c00
 8000bd8:	ea0ea0eb 	.word	0xea0ea0eb
 8000bdc:	20000200 	.word	0x20000200
 8000be0:	200001fc 	.word	0x200001fc
 8000be4:	20000210 	.word	0x20000210

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	@ 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	@ 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f006 fee8 	bl	80079cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1c:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <SystemClock_Config+0xcc>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <SystemClock_Config+0xd0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 ffaa 	bl	8002bc8 <HAL_RCC_OscConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c7a:	f000 f903 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	230f      	movs	r3, #15
 8000c80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2302      	movs	r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2105      	movs	r1, #5
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fa0b 	bl	80030b8 <HAL_RCC_ClockConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ca8:	f000 f8ec 	bl	8000e84 <Error_Handler>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3750      	adds	r7, #80	@ 0x50
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000

08000cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <MX_SPI1_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf0:	2230      	movs	r2, #48	@ 0x30
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_SPI1_Init+0x64>)
 8000d0e:	f002 fbcb 	bl	80034a8 <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 f8b4 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000019c 	.word	0x2000019c
 8000d24:	40013000 	.word	0x40013000

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b42      	ldr	r3, [pc, #264]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a41      	ldr	r2, [pc, #260]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a3a      	ldr	r2, [pc, #232]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b38      	ldr	r3, [pc, #224]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b34      	ldr	r3, [pc, #208]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a33      	ldr	r2, [pc, #204]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b2d      	ldr	r3, [pc, #180]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a25      	ldr	r2, [pc, #148]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_GPIO_Init+0x124>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4820      	ldr	r0, [pc, #128]	@ (8000e50 <MX_GPIO_Init+0x128>)
 8000dd0:	f000 fc8e 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000dda:	481e      	ldr	r0, [pc, #120]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000ddc:	f000 fc88 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MEMS_CS_Pin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8000de0:	2308      	movs	r3, #8
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4816      	ldr	r0, [pc, #88]	@ (8000e50 <MX_GPIO_Init+0x128>)
 8000df8:	f000 fade 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0x130>)
 8000e12:	f000 fad1 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e16:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <MX_GPIO_Init+0x12c>)
 8000e30:	f000 fac2 	bl	80013b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f000 fa86 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e3e:	2006      	movs	r0, #6
 8000e40:	f000 fa9f 	bl	8001382 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//interrupt for mouse button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d102      	bne.n	8000e72 <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
	}
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001fc 	.word	0x200001fc

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f000 fa30 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	@ (8000f64 <HAL_SPI_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23e0      	movs	r3, #224	@ 0xe0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_SPI_MspInit+0x8c>)
 8000f56:	f000 fa2f 	bl	80013b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <NMI_Handler+0x4>

08000f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <MemManage_Handler+0x4>

08000f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f8a1 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fba6 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <OTG_FS_IRQHandler+0x10>)
 8000fe2:	f000 fcfb 	bl	80019dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200006ec 	.word	0x200006ec

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f006 fccb 	bl	80079dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fc5b 	bl	8000900 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001058:	08007ab4 	.word	0x08007ab4
  ldr r2, =_sbss
 800105c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001060:	20000be4 	.word	0x20000be4

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fef8 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000000c 	.word	0x2000000c
 8001104:	20000014 	.word	0x20000014
 8001108:	20000010 	.word	0x20000010

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000014 	.word	0x20000014
 8001130:	20000208 	.word	0x20000208

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000208 	.word	0x20000208

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000014 	.word	0x20000014

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e16b      	b.n	80016ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 815a 	bne.w	80016a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80b4 	beq.w	80016a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b60      	ldr	r3, [pc, #384]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a5f      	ldr	r2, [pc, #380]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a5b      	ldr	r2, [pc, #364]	@ (80016c8 <HAL_GPIO_Init+0x310>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	@ (80016cc <HAL_GPIO_Init+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <HAL_GPIO_Init+0x318>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	@ (80016d4 <HAL_GPIO_Init+0x31c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x21a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	@ (80016dc <HAL_GPIO_Init+0x324>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x216>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	@ (80016e0 <HAL_GPIO_Init+0x328>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x212>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	@ (80016e4 <HAL_GPIO_Init+0x32c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	@ (80016e8 <HAL_GPIO_Init+0x330>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x20a>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00e      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c2:	2308      	movs	r3, #8
 80015c4:	e00c      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	@ (80016c8 <HAL_GPIO_Init+0x310>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a32      	ldr	r2, [pc, #200]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <HAL_GPIO_Init+0x334>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f ae90 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40021800 	.word	0x40021800
 80016e8:	40021c00 	.word	0x40021c00
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb8a 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af02      	add	r7, sp, #8
 800175a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e101      	b.n	800196a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d106      	bne.n	8001786 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f005 fe21 	bl	80073c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001794:	d102      	bne.n	800179c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fd6a 	bl	800427a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7c1a      	ldrb	r2, [r3, #16]
 80017ae:	f88d 2000 	strb.w	r2, [sp]
 80017b2:	3304      	adds	r3, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	f002 fc49 	bl	800404c <USB_CoreInit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ce      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fd62 	bl	800429c <USB_SetCurrentMode>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0bf      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e04a      	b.n	8001886 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017f0:	7bfa      	ldrb	r2, [r7, #15]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3315      	adds	r3, #21
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3314      	adds	r3, #20
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	b298      	uxth	r0, r3
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	332e      	adds	r3, #46	@ 0x2e
 800182c:	4602      	mov	r2, r0
 800182e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3318      	adds	r3, #24
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	331c      	adds	r3, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	3320      	adds	r3, #32
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3324      	adds	r3, #36	@ 0x24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3af      	bcc.n	80017f0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e044      	b.n	8001920 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018ac:	7bfa      	ldrb	r2, [r7, #15]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3b5      	bcc.n	8001896 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7c1a      	ldrb	r2, [r3, #16]
 8001932:	f88d 2000 	strb.w	r2, [sp]
 8001936:	3304      	adds	r3, #4
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	f002 fcfb 	bl	8004334 <USB_DevInit>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00c      	b.n	800196a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fd45 	bl	80053f2 <USB_DevDisconnect>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_PCD_Start+0x1c>
 800198a:	2302      	movs	r3, #2
 800198c:	e022      	b.n	80019d4 <HAL_PCD_Start+0x62>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fc4c 	bl	8004258 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fcf3 	bl	80053b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08d      	sub	sp, #52	@ 0x34
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 fdb1 	bl	800555a <USB_GetMode>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 848c 	bne.w	8002318 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fd15 	bl	8005434 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8482 	beq.w	8002316 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fd02 	bl	8005434 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 0202 	and.w	r2, r2, #2
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fcf0 	bl	8005434 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d161      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0210 	bic.w	r2, r2, #16
 8001a6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 020f 	and.w	r2, r3, #15
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	0c5b      	lsrs	r3, r3, #17
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d124      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d035      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6a38      	ldr	r0, [r7, #32]
 8001aba:	f003 fb27 	bl	800510c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001aca:	441a      	add	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001adc:	441a      	add	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	615a      	str	r2, [r3, #20]
 8001ae2:	e016      	b.n	8001b12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	0c5b      	lsrs	r3, r3, #17
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b06      	cmp	r3, #6
 8001aee:	d110      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001af6:	2208      	movs	r2, #8
 8001af8:	4619      	mov	r1, r3
 8001afa:	6a38      	ldr	r0, [r7, #32]
 8001afc:	f003 fb06 	bl	800510c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b0c:	441a      	add	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0210 	orr.w	r2, r2, #16
 8001b20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fc84 	bl	8005434 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b32:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001b36:	f040 80a7 	bne.w	8001c88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fc89 	bl	800545a <USB_ReadDevAllOutEpInterrupt>
 8001b48:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001b4a:	e099      	b.n	8001c80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 808e 	beq.w	8001c74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 fcad 	bl	80054c2 <USB_ReadDevOutEPInterrupt>
 8001b68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b80:	461a      	mov	r2, r3
 8001b82:	2301      	movs	r3, #1
 8001b84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fe8b 	bl	80028a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00c      	beq.n	8001bb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 ff61 	bl	8002a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2310      	movs	r3, #16
 8001bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d030      	beq.n	8001c3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be0:	2b80      	cmp	r3, #128	@ 0x80
 8001be2:	d109      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bf6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f005 fcd6 	bl	80075d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c34:	461a      	mov	r2, r3
 8001c36:	2302      	movs	r3, #2
 8001c38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d008      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c50:	461a      	mov	r2, r3
 8001c52:	2320      	movs	r3, #32
 8001c54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	3301      	adds	r3, #1
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f47f af62 	bne.w	8001b4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 fbd1 	bl	8005434 <USB_ReadInterrupts>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c9c:	f040 80db 	bne.w	8001e56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fbf2 	bl	800548e <USB_ReadDevAllInEpInterrupt>
 8001caa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001cb0:	e0cd      	b.n	8001e4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80c2 	beq.w	8001e42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fc18 	bl	80054fe <USB_ReadDevInEPInterrupt>
 8001cce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d057      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69f9      	ldr	r1, [r7, #28]
 8001cf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d132      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3320      	adds	r3, #32
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4403      	add	r3, r0
 8001d38:	331c      	adds	r3, #28
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4419      	add	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4403      	add	r3, r0
 8001d4c:	3320      	adds	r3, #32
 8001d4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d113      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	3324      	adds	r3, #36	@ 0x24
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d108      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d76:	461a      	mov	r2, r3
 8001d78:	2101      	movs	r1, #1
 8001d7a:	f003 fc1f 	bl	80055bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 fba0 	bl	80074ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2308      	movs	r3, #8
 8001da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2340      	movs	r3, #64	@ 0x40
 8001ddc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dea:	6a38      	ldr	r0, [r7, #32]
 8001dec:	f002 fc06 	bl	80045fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f005 fbed 	bl	80075f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fca5 	bl	800278c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f47f af2e 	bne.w	8001cb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 faea 	bl	8005434 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e6a:	d122      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e92:	2100      	movs	r1, #0
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fe8b 	bl	8002bb0 <HAL_PCDEx_LPM_Callback>
 8001e9a:	e002      	b.n	8001ea2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f005 fb8b 	bl	80075b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fabc 	bl	8005434 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ec6:	d112      	bne.n	8001eee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f005 fb47 	bl	800756c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001eec:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fa9e 	bl	8005434 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f02:	f040 80b7 	bne.w	8002074 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fb6b 	bl	80045fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f2a:	e046      	b.n	8001fba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f50:	0151      	lsls	r1, r2, #5
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	440a      	add	r2, r1
 8001f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001f5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001f72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f84:	0151      	lsls	r1, r2, #5
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	440a      	add	r2, r1
 8001f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001f8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001f92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fa4:	0151      	lsls	r1, r2, #5
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	440a      	add	r2, r1
 8001faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	791b      	ldrb	r3, [r3, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d3b2      	bcc.n	8001f2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fd4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001fd8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7bdb      	ldrb	r3, [r3, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ff2:	f043 030b 	orr.w	r3, r3, #11
 8001ff6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002008:	f043 030b 	orr.w	r3, r3, #11
 800200c:	6453      	str	r3, [r2, #68]	@ 0x44
 800200e:	e015      	b.n	800203c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800201e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002022:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002026:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002036:	f043 030b 	orr.w	r3, r3, #11
 800203a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800204a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800204e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800205e:	461a      	mov	r2, r3
 8002060:	f003 faac 	bl	80055bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 f9db 	bl	8005434 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002084:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002088:	d123      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fa71 	bl	8005576 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fb28 	bl	80046ee <USB_GetDevSpeed>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681c      	ldr	r4, [r3, #0]
 80020aa:	f001 f9f1 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80020ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020b4:	461a      	mov	r2, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f002 f82c 	bl	8004114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f005 fa2c 	bl	800751a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 f9ac 	bl	8005434 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d10a      	bne.n	80020fc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f005 fa09 	bl	80074fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f002 0208 	and.w	r2, r2, #8
 80020fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 f997 	bl	8005434 <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d123      	bne.n	8002158 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800211c:	2301      	movs	r3, #1
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002120:	e014      	b.n	800214c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d105      	bne.n	8002146 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4619      	mov	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 faf2 	bl	800272a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	3301      	adds	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	461a      	mov	r2, r3
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	4293      	cmp	r3, r2
 8002156:	d3e4      	bcc.n	8002122 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 f969 	bl	8005434 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800216c:	d13c      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800216e:	2301      	movs	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
 8002172:	e02b      	b.n	80021cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3318      	adds	r3, #24
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d115      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800219a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800219c:	2b00      	cmp	r3, #0
 800219e:	da12      	bge.n	80021c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3317      	adds	r3, #23
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fab2 	bl	800272a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	461a      	mov	r2, r3
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d3cd      	bcc.n	8002174 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 f921 	bl	8005434 <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021fc:	d156      	bne.n	80022ac <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021fe:	2301      	movs	r3, #1
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	e045      	b.n	8002290 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d12e      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800222c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	da2b      	bge.n	800228a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800223e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002242:	429a      	cmp	r2, r3
 8002244:	d121      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002286:	6053      	str	r3, [r2, #4]
            break;
 8002288:	e008      	b.n	800229c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	3301      	adds	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	461a      	mov	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	4293      	cmp	r3, r2
 800229a:	d3b3      	bcc.n	8002204 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80022aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 f8bf 	bl	8005434 <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d10a      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f005 f9aa 	bl	800761c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80022d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 f8a9 	bl	8005434 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d115      	bne.n	8002318 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 f99a 	bl	8007638 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	e000      	b.n	8002318 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002316:	bf00      	nop
    }
  }
}
 8002318:	3734      	adds	r7, #52	@ 0x34
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}

0800231e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_PCD_SetAddress+0x1a>
 8002334:	2302      	movs	r3, #2
 8002336:	e012      	b.n	800235e <HAL_PCD_SetAddress+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f003 f808 	bl	8005364 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	460b      	mov	r3, r1
 800237a:	803b      	strh	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0f      	bge.n	80023ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3310      	adds	r3, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	705a      	strb	r2, [r3, #1]
 80023aa:	e00f      	b.n	80023cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	3304      	adds	r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80023d8:	883b      	ldrh	r3, [r7, #0]
 80023da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	78ba      	ldrb	r2, [r7, #2]
 80023e6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023fa:	78bb      	ldrb	r3, [r7, #2]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d102      	bne.n	8002406 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_PCD_EP_Open+0xae>
 8002410:	2302      	movs	r3, #2
 8002412:	e00e      	b.n	8002432 <HAL_PCD_EP_Open+0xcc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68f9      	ldr	r1, [r7, #12]
 8002422:	4618      	mov	r0, r3
 8002424:	f002 f988 	bl	8004738 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002430:	7afb      	ldrb	r3, [r7, #11]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244a:	2b00      	cmp	r3, #0
 800244c:	da0f      	bge.n	800246e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	3310      	adds	r3, #16
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	705a      	strb	r2, [r3, #1]
 800246c:	e00f      	b.n	800248e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 020f 	and.w	r2, r3, #15
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_PCD_EP_Close+0x6e>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_Close+0x8c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f002 f9c6 	bl	8004848 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	460b      	mov	r3, r1
 80024dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002510:	7afb      	ldrb	r3, [r7, #11]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	b2da      	uxtb	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	799b      	ldrb	r3, [r3, #6]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	461a      	mov	r2, r3
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	f002 fa63 	bl	8004a00 <USB_EPStartXfer>

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	460b      	mov	r3, r1
 8002552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	f003 020f 	and.w	r2, r3, #15
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	3310      	adds	r3, #16
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2201      	movs	r2, #1
 8002582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	b2da      	uxtb	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	799b      	ldrb	r3, [r3, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	799b      	ldrb	r3, [r3, #6]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	f002 fa29 	bl	8004a00 <USB_EPStartXfer>

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	7912      	ldrb	r2, [r2, #4]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e04f      	b.n	8002676 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da0f      	bge.n	80025fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025de:	78fb      	ldrb	r3, [r7, #3]
 80025e0:	f003 020f 	and.w	r2, r3, #15
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	3310      	adds	r3, #16
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	705a      	strb	r2, [r3, #1]
 80025fc:	e00d      	b.n	800261a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_PCD_EP_SetStall+0x82>
 8002636:	2302      	movs	r3, #2
 8002638:	e01d      	b.n	8002676 <HAL_PCD_EP_SetStall+0xbe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	4618      	mov	r0, r3
 800264a:	f002 fdb7 	bl	80051bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7999      	ldrb	r1, [r3, #6]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002666:	461a      	mov	r2, r3
 8002668:	f002 ffa8 	bl	80055bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	7912      	ldrb	r2, [r2, #4]
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e042      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800269c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	da0f      	bge.n	80026c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 020f 	and.w	r2, r3, #15
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3310      	adds	r3, #16
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	3304      	adds	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	705a      	strb	r2, [r3, #1]
 80026c2:	e00f      	b.n	80026e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_EP_ClrStall+0x86>
 8002700:	2302      	movs	r3, #2
 8002702:	e00e      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fdc0 	bl	8005298 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da0c      	bge.n	8002758 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	f003 020f 	and.w	r2, r3, #15
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	3310      	adds	r3, #16
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	3304      	adds	r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e00c      	b.n	8002772 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fbdf 	bl	8004f3c <USB_EPStopXfer>
 800277e:	4603      	mov	r3, r0
 8002780:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002782:	7afb      	ldrb	r3, [r7, #11]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3310      	adds	r3, #16
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d901      	bls.n	80027c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e06b      	b.n	800289c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d902      	bls.n	80027e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3303      	adds	r3, #3
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027e8:	e02a      	b.n	8002840 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d902      	bls.n	8002806 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3303      	adds	r3, #3
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68d9      	ldr	r1, [r3, #12]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4603      	mov	r3, r0
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f002 fc34 	bl	8005090 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	441a      	add	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	441a      	add	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	429a      	cmp	r2, r3
 8002854:	d809      	bhi.n	800286a <PCD_WriteEmptyTxFifo+0xde>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285e:	429a      	cmp	r2, r3
 8002860:	d203      	bcs.n	800286a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1bf      	bne.n	80027ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	d811      	bhi.n	800289a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	2201      	movs	r2, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800288a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	43db      	mvns	r3, r3
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002896:	4013      	ands	r3, r2
 8002898:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3720      	adds	r7, #32
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	333c      	adds	r3, #60	@ 0x3c
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	799b      	ldrb	r3, [r3, #6]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d17b      	bne.n	80029d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4a61      	ldr	r2, [pc, #388]	@ (8002a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	f240 80b9 	bls.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80b3 	beq.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e0a7      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002926:	461a      	mov	r2, r3
 8002928:	2320      	movs	r3, #32
 800292a:	6093      	str	r3, [r2, #8]
 800292c:	e098      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 8093 	bne.w	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d90f      	bls.n	8002962 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800295e:	6093      	str	r3, [r2, #8]
 8002960:	e07e      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	440b      	add	r3, r1
 8002984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	1ad2      	subs	r2, r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d114      	bne.n	80029c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ac:	461a      	mov	r2, r3
 80029ae:	2101      	movs	r1, #1
 80029b0:	f002 fe04 	bl	80055bc <USB_EP0_OutStart>
 80029b4:	e006      	b.n	80029c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	441a      	add	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f004 fd62 	bl	8007494 <HAL_PCD_DataOutStageCallback>
 80029d0:	e046      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4a26      	ldr	r2, [pc, #152]	@ (8002a70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d124      	bne.n	8002a24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	e032      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a10:	461a      	mov	r2, r3
 8002a12:	2320      	movs	r3, #32
 8002a14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f004 fd39 	bl	8007494 <HAL_PCD_DataOutStageCallback>
 8002a22:	e01d      	b.n	8002a60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d114      	bne.n	8002a54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f002 fdb4 	bl	80055bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f004 fd1a 	bl	8007494 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	4f54300a 	.word	0x4f54300a
 8002a70:	4f54310a 	.word	0x4f54310a

08002a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	333c      	adds	r3, #60	@ 0x3c
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d90e      	bls.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f004 fcd1 	bl	8007470 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90c      	bls.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f002 fd66 	bl	80055bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	4f54300a 	.word	0x4f54300a

08002b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b1e:	883b      	ldrh	r3, [r7, #0]
 8002b20:	0419      	lsls	r1, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b2c:	e028      	b.n	8002b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e00d      	b.n	8002b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3340      	adds	r3, #64	@ 0x40
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d3ec      	bcc.n	8002b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b68:	883b      	ldrh	r3, [r7, #0]
 8002b6a:	0418      	lsls	r0, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4302      	orrs	r2, r0
 8002b78:	3340      	adds	r3, #64	@ 0x40
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e267      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e242      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa58 	bl	8001134 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fa54 	bl	8001134 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e207      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fa44 	bl	8001134 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa40 	bl	8001134 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	@ 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1f3      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cde:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c7      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4937      	ldr	r1, [pc, #220]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe f9f9 	bl	8001134 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fe f9f5 	bl	8001134 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a8      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4925      	ldr	r1, [pc, #148]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b24      	ldr	r3, [pc, #144]	@ (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f9d8 	bl	8001134 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7fe f9d4 	bl	8001134 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e187      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d036      	beq.n	8002e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f9b8 	bl	8001134 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe f9b4 	bl	8001134 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e167      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7fe f9a1 	bl	8001134 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00e      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7fe f99d 	bl	8001134 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e150      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ea      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b81      	ldr	r3, [pc, #516]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b7d      	ldr	r3, [pc, #500]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b77      	ldr	r3, [pc, #476]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b74      	ldr	r3, [pc, #464]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f95d 	bl	8001134 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe f959 	bl	8001134 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e10c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6a      	ldr	r3, [pc, #424]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
 8002ea4:	4b64      	ldr	r3, [pc, #400]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	4a63      	ldr	r2, [pc, #396]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x30c>
 8002eba:	4b5f      	ldr	r3, [pc, #380]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002ed4:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed8:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee0:	4b55      	ldr	r3, [pc, #340]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	4a54      	ldr	r2, [pc, #336]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f91e 	bl	8001134 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe f91a 	bl	8001134 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0cb      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7fe f908 	bl	8001134 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7fe f904 	bl	8001134 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0b5      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b39      	ldr	r3, [pc, #228]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a1 	beq.w	80030a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f66:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d05c      	beq.n	800302c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d141      	bne.n	8002ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b31      	ldr	r3, [pc, #196]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe f8d8 	bl	8001134 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f8d4 	bl	8001134 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e087      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	491b      	ldr	r1, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe f8ad 	bl	8001134 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe f8a9 	bl	8001134 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e05c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x416>
 8002ffc:	e054      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe f896 	bl	8001134 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f892 	bl	8001134 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e045      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
 800302a:	e03d      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e038      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800307a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fd ffc4 	bl	8001134 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fd ffc0 	bl	8001134 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd ff24 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08007a94 	.word	0x08007a94
 800327c:	2000000c 	.word	0x2000000c
 8003280:	20000010 	.word	0x20000010

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b094      	sub	sp, #80	@ 0x50
 800328a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329c:	4b79      	ldr	r3, [pc, #484]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x40>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	f200 80e1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x3a>
 80032b6:	e0db      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b73      	ldr	r3, [pc, #460]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032bc:	e0db      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032be:	4b73      	ldr	r3, [pc, #460]	@ (800348c <HAL_RCC_GetSysClockFreq+0x208>)
 80032c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4621      	mov	r1, r4
 8003310:	1a51      	subs	r1, r2, r1
 8003312:	6139      	str	r1, [r7, #16]
 8003314:	4629      	mov	r1, r5
 8003316:	eb63 0301 	sbc.w	r3, r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003332:	4651      	mov	r1, sl
 8003334:	018a      	lsls	r2, r1, #6
 8003336:	4651      	mov	r1, sl
 8003338:	ebb2 0801 	subs.w	r8, r2, r1
 800333c:	4659      	mov	r1, fp
 800333e:	eb63 0901 	sbc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	462b      	mov	r3, r5
 8003364:	eb49 0303 	adc.w	r3, r9, r3
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003376:	4629      	mov	r1, r5
 8003378:	024b      	lsls	r3, r1, #9
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003380:	4621      	mov	r1, r4
 8003382:	024a      	lsls	r2, r1, #9
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003394:	f7fc ff18 	bl	80001c8 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e058      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4611      	mov	r1, r2
 80033ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4641      	mov	r1, r8
 80033d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f4:	ebb2 040a 	subs.w	r4, r2, sl
 80033f8:	eb63 050b 	sbc.w	r5, r3, fp
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	f7fc febe 	bl	80001c8 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003478:	4618      	mov	r0, r3
 800347a:	3750      	adds	r7, #80	@ 0x50
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07b      	b.n	80035b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d108      	bne.n	80034d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ca:	d009      	beq.n	80034e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
 80034d2:	e005      	b.n	80034e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fcf0 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	ea42 0103 	orr.w	r1, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	0c1b      	lsrs	r3, r3, #16
 800357e:	f003 0104 	and.w	r1, r3, #4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0210 	and.w	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ca:	f7fd fdb3 	bl	8001134 <HAL_GetTick>
 80035ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035e0:	2302      	movs	r3, #2
 80035e2:	e12a      	b.n	800383a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0x36>
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e122      	b.n	800383a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_SPI_Transmit+0x48>
 80035fe:	2302      	movs	r3, #2
 8003600:	e11b      	b.n	800383a <HAL_SPI_Transmit+0x280>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2203      	movs	r2, #3
 800360e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003650:	d10f      	bne.n	8003672 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003660:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003670:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	d007      	beq.n	8003690 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003698:	d152      	bne.n	8003740 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_Transmit+0xee>
 80036a2:	8b7b      	ldrh	r3, [r7, #26]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d145      	bne.n	8003734 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036cc:	e032      	b.n	8003734 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d112      	bne.n	8003702 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003700:	e018      	b.n	8003734 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003702:	f7fd fd17 	bl	8001134 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_Transmit+0x160>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Transmit+0x166>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e082      	b.n	800383a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1c7      	bne.n	80036ce <HAL_SPI_Transmit+0x114>
 800373e:	e053      	b.n	80037e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_Transmit+0x194>
 8003748:	8b7b      	ldrh	r3, [r7, #26]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d147      	bne.n	80037de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003774:	e033      	b.n	80037de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d113      	bne.n	80037ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037aa:	e018      	b.n	80037de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ac:	f7fd fcc2 	bl	8001134 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d803      	bhi.n	80037c4 <HAL_SPI_Transmit+0x20a>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Transmit+0x210>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e02d      	b.n	800383a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1c6      	bne.n	8003776 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	6839      	ldr	r1, [r7, #0]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 fbd9 	bl	8003fa4 <SPI_EndRxTxTransaction>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003838:	2300      	movs	r3, #0
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b088      	sub	sp, #32
 8003846:	af02      	add	r7, sp, #8
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
 8003860:	e104      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800386a:	d112      	bne.n	8003892 <HAL_SPI_Receive+0x50>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2204      	movs	r2, #4
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f8f3 	bl	8003a74 <HAL_SPI_TransmitReceive>
 800388e:	4603      	mov	r3, r0
 8003890:	e0ec      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003892:	f7fd fc4f 	bl	8001134 <HAL_GetTick>
 8003896:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Receive+0x62>
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0e1      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_Receive+0x74>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0da      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2204      	movs	r2, #4
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003904:	d10f      	bne.n	8003926 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003924:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b40      	cmp	r3, #64	@ 0x40
 8003932:	d007      	beq.n	8003944 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d170      	bne.n	8003a2e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800394c:	e035      	b.n	80039ba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d115      	bne.n	8003988 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f103 020c 	add.w	r2, r3, #12
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003986:	e018      	b.n	80039ba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003988:	f7fd fbd4 	bl	8001134 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d803      	bhi.n	80039a0 <HAL_SPI_Receive+0x15e>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399e:	d102      	bne.n	80039a6 <HAL_SPI_Receive+0x164>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e058      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1c4      	bne.n	800394e <HAL_SPI_Receive+0x10c>
 80039c4:	e038      	b.n	8003a38 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d113      	bne.n	80039fc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	b292      	uxth	r2, r2
 80039e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039fa:	e018      	b.n	8003a2e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fc:	f7fd fb9a 	bl	8001134 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d803      	bhi.n	8003a14 <HAL_SPI_Receive+0x1d2>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d102      	bne.n	8003a1a <HAL_SPI_Receive+0x1d8>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e01e      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1c6      	bne.n	80039c6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6839      	ldr	r1, [r7, #0]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fa4b 	bl	8003ed8 <SPI_EndRxTransaction>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	@ 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a82:	2301      	movs	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a86:	f7fd fb55 	bl	8001134 <HAL_GetTick>
 8003a8a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a92:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d00c      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x4a>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aaa:	d106      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x46>
 8003ab4:	7ffb      	ldrb	r3, [r7, #31]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d001      	beq.n	8003abe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
 8003abc:	e17f      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x5c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_TransmitReceive+0x5c>
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e174      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x6e>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e16d      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d003      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2205      	movs	r2, #5
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	887a      	ldrh	r2, [r7, #2]
 8003b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	887a      	ldrh	r2, [r7, #2]
 8003b26:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b40      	cmp	r3, #64	@ 0x40
 8003b40:	d007      	beq.n	8003b52 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b5a:	d17e      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0xf6>
 8003b64:	8afb      	ldrh	r3, [r7, #22]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d16c      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8e:	e059      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d11b      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x162>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x162>
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d113      	bne.n	8003bd6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d119      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x1a4>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c14:	2301      	movs	r3, #1
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c18:	f7fd fa8c 	bl	8001134 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d80d      	bhi.n	8003c44 <HAL_SPI_TransmitReceive+0x1d0>
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d009      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0bc      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1a0      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x11c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d19b      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x11c>
 8003c58:	e082      	b.n	8003d60 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_TransmitReceive+0x1f4>
 8003c62:	8afb      	ldrh	r3, [r7, #22]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d171      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c8e:	e05d      	b.n	8003d4c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x264>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d017      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x264>
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d114      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d119      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x2a6>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d16:	2301      	movs	r3, #1
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d1a:	f7fd fa0b 	bl	8001134 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d803      	bhi.n	8003d32 <HAL_SPI_TransmitReceive+0x2be>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d102      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2c4>
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e038      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d19c      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x21c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d197      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f91d 	bl	8003fa4 <SPI_EndRxTxTransaction>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e01d      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3728      	adds	r7, #40	@ 0x28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dd8:	f7fd f9ac 	bl	8001134 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4413      	add	r3, r2
 8003de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003de8:	f7fd f9a4 	bl	8001134 <HAL_GetTick>
 8003dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dee:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	0d1b      	lsrs	r3, r3, #20
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	e054      	b.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d050      	beq.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e08:	f7fd f994 	bl	8001134 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d902      	bls.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d13d      	bne.n	8003e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e36:	d111      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e40:	d004      	beq.n	8003e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4a:	d107      	bne.n	8003e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e64:	d10f      	bne.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e017      	b.n	8003eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d19b      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000000c 	.word	0x2000000c

08003ed8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eec:	d111      	bne.n	8003f12 <SPI_EndRxTransaction+0x3a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef6:	d004      	beq.n	8003f02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f00:	d107      	bne.n	8003f12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f1a:	d12a      	bne.n	8003f72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f24:	d012      	beq.n	8003f4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	@ 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff49 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02d      	beq.n	8003f98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f40:	f043 0220 	orr.w	r2, r3, #32
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e026      	b.n	8003f9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	2101      	movs	r1, #1
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff ff36 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01a      	beq.n	8003f98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e013      	b.n	8003f9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ff23 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e000      	b.n	8003f9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2102      	movs	r1, #2
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f7ff ff04 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e032      	b.n	800403c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <SPI_EndRxTxTransaction+0xa0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <SPI_EndRxTxTransaction+0xa4>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0d5b      	lsrs	r3, r3, #21
 8003fe2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff4:	d112      	bne.n	800401c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff fee1 	bl	8003dc8 <SPI_WaitFlagStateUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e00f      	b.n	800403c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	3b01      	subs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b80      	cmp	r3, #128	@ 0x80
 8004034:	d0f2      	beq.n	800401c <SPI_EndRxTxTransaction+0x78>
 8004036:	e000      	b.n	800403a <SPI_EndRxTxTransaction+0x96>
        break;
 8004038:	bf00      	nop
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000000c 	.word	0x2000000c
 8004048:	165e9f81 	.word	0x165e9f81

0800404c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800404c:	b084      	sub	sp, #16
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	f107 001c 	add.w	r0, r7, #28
 800405a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800405e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004062:	2b01      	cmp	r3, #1
 8004064:	d123      	bne.n	80040ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800407a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800408e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 fae8 	bl	8005678 <USB_CoreReset>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	e01b      	b.n	80040e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 fadc 	bl	8005678 <USB_CoreReset>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d106      	bne.n	80040da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80040d8:	e005      	b.n	80040e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040e6:	7fbb      	ldrb	r3, [r7, #30]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10b      	bne.n	8004104 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f043 0206 	orr.w	r2, r3, #6
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004110:	b004      	add	sp, #16
 8004112:	4770      	bx	lr

08004114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d165      	bne.n	80041f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a41      	ldr	r2, [pc, #260]	@ (8004230 <USB_SetTurnaroundTime+0x11c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d906      	bls.n	800413e <USB_SetTurnaroundTime+0x2a>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4a40      	ldr	r2, [pc, #256]	@ (8004234 <USB_SetTurnaroundTime+0x120>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d202      	bcs.n	800413e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004138:	230f      	movs	r3, #15
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e062      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a3c      	ldr	r2, [pc, #240]	@ (8004234 <USB_SetTurnaroundTime+0x120>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d306      	bcc.n	8004154 <USB_SetTurnaroundTime+0x40>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a3b      	ldr	r2, [pc, #236]	@ (8004238 <USB_SetTurnaroundTime+0x124>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d202      	bcs.n	8004154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800414e:	230e      	movs	r3, #14
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e057      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4a38      	ldr	r2, [pc, #224]	@ (8004238 <USB_SetTurnaroundTime+0x124>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d306      	bcc.n	800416a <USB_SetTurnaroundTime+0x56>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a37      	ldr	r2, [pc, #220]	@ (800423c <USB_SetTurnaroundTime+0x128>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d202      	bcs.n	800416a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004164:	230d      	movs	r3, #13
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	e04c      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a33      	ldr	r2, [pc, #204]	@ (800423c <USB_SetTurnaroundTime+0x128>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d306      	bcc.n	8004180 <USB_SetTurnaroundTime+0x6c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4a32      	ldr	r2, [pc, #200]	@ (8004240 <USB_SetTurnaroundTime+0x12c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d802      	bhi.n	8004180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800417a:	230c      	movs	r3, #12
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e041      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a2f      	ldr	r2, [pc, #188]	@ (8004240 <USB_SetTurnaroundTime+0x12c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d906      	bls.n	8004196 <USB_SetTurnaroundTime+0x82>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a2e      	ldr	r2, [pc, #184]	@ (8004244 <USB_SetTurnaroundTime+0x130>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d802      	bhi.n	8004196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004190:	230b      	movs	r3, #11
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e036      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a2a      	ldr	r2, [pc, #168]	@ (8004244 <USB_SetTurnaroundTime+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d906      	bls.n	80041ac <USB_SetTurnaroundTime+0x98>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a29      	ldr	r2, [pc, #164]	@ (8004248 <USB_SetTurnaroundTime+0x134>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041a6:	230a      	movs	r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e02b      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a26      	ldr	r2, [pc, #152]	@ (8004248 <USB_SetTurnaroundTime+0x134>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d906      	bls.n	80041c2 <USB_SetTurnaroundTime+0xae>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a25      	ldr	r2, [pc, #148]	@ (800424c <USB_SetTurnaroundTime+0x138>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d202      	bcs.n	80041c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041bc:	2309      	movs	r3, #9
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e020      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a21      	ldr	r2, [pc, #132]	@ (800424c <USB_SetTurnaroundTime+0x138>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d306      	bcc.n	80041d8 <USB_SetTurnaroundTime+0xc4>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a20      	ldr	r2, [pc, #128]	@ (8004250 <USB_SetTurnaroundTime+0x13c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041d2:	2308      	movs	r3, #8
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e015      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <USB_SetTurnaroundTime+0x13c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <USB_SetTurnaroundTime+0xda>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <USB_SetTurnaroundTime+0x140>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d202      	bcs.n	80041ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041e8:	2307      	movs	r3, #7
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e00a      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041ee:	2306      	movs	r3, #6
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e007      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041fa:	2309      	movs	r3, #9
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e001      	b.n	8004204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004200:	2309      	movs	r3, #9
 8004202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	029b      	lsls	r3, r3, #10
 8004218:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	00d8acbf 	.word	0x00d8acbf
 8004234:	00e4e1c0 	.word	0x00e4e1c0
 8004238:	00f42400 	.word	0x00f42400
 800423c:	01067380 	.word	0x01067380
 8004240:	011a499f 	.word	0x011a499f
 8004244:	01312cff 	.word	0x01312cff
 8004248:	014ca43f 	.word	0x014ca43f
 800424c:	016e3600 	.word	0x016e3600
 8004250:	01a6ab1f 	.word	0x01a6ab1f
 8004254:	01e84800 	.word	0x01e84800

08004258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f043 0201 	orr.w	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 0201 	bic.w	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d115      	bne.n	80042ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042ca:	200a      	movs	r0, #10
 80042cc:	f7fc ff3e 	bl	800114c <HAL_Delay>
      ms += 10U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	330a      	adds	r3, #10
 80042d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 f93f 	bl	800555a <USB_GetMode>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d01e      	beq.n	8004320 <USB_SetCurrentMode+0x84>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80042e6:	d9f0      	bls.n	80042ca <USB_SetCurrentMode+0x2e>
 80042e8:	e01a      	b.n	8004320 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d115      	bne.n	800431c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042fc:	200a      	movs	r0, #10
 80042fe:	f7fc ff25 	bl	800114c <HAL_Delay>
      ms += 10U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	330a      	adds	r3, #10
 8004306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 f926 	bl	800555a <USB_GetMode>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <USB_SetCurrentMode+0x84>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2bc7      	cmp	r3, #199	@ 0xc7
 8004318:	d9f0      	bls.n	80042fc <USB_SetCurrentMode+0x60>
 800431a:	e001      	b.n	8004320 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e005      	b.n	800432c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2bc8      	cmp	r3, #200	@ 0xc8
 8004324:	d101      	bne.n	800432a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004334:	b084      	sub	sp, #16
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	e009      	b.n	8004368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3340      	adds	r3, #64	@ 0x40
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3301      	adds	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b0e      	cmp	r3, #14
 800436c:	d9f2      	bls.n	8004354 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800436e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11c      	bne.n	80043b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004384:	f043 0302 	orr.w	r3, r3, #2
 8004388:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80043ae:	e00b      	b.n	80043c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10d      	bne.n	80043f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043e4:	2100      	movs	r1, #0
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f968 	bl	80046bc <USB_SetDevSpeed>
 80043ec:	e008      	b.n	8004400 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043ee:	2101      	movs	r1, #1
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f963 	bl	80046bc <USB_SetDevSpeed>
 80043f6:	e003      	b.n	8004400 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043f8:	2103      	movs	r1, #3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f95e 	bl	80046bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004400:	2110      	movs	r1, #16
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f8fa 	bl	80045fc <USB_FlushTxFifo>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f924 	bl	8004660 <USB_FlushRxFifo>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004428:	461a      	mov	r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004434:	461a      	mov	r2, r3
 8004436:	2300      	movs	r3, #0
 8004438:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	e043      	b.n	80044d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800445e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004462:	d118      	bne.n	8004496 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004476:	461a      	mov	r2, r3
 8004478:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e013      	b.n	80044a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448c:	461a      	mov	r2, r3
 800448e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e008      	b.n	80044a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b4:	461a      	mov	r2, r3
 80044b6:	2300      	movs	r3, #0
 80044b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c6:	461a      	mov	r2, r3
 80044c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3301      	adds	r3, #1
 80044d2:	613b      	str	r3, [r7, #16]
 80044d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044d8:	461a      	mov	r2, r3
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4293      	cmp	r3, r2
 80044de:	d3b5      	bcc.n	800444c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e043      	b.n	800456e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fc:	d118      	bne.n	8004530 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e013      	b.n	8004542 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e008      	b.n	8004542 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	2300      	movs	r3, #0
 8004540:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800454e:	461a      	mov	r2, r3
 8004550:	2300      	movs	r3, #0
 8004552:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004566:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004572:	461a      	mov	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4293      	cmp	r3, r2
 8004578:	d3b5      	bcc.n	80044e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800458c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800459a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800459c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <USB_DevInit+0x2c4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f043 0208 	orr.w	r2, r3, #8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f4:	b004      	add	sp, #16
 80045f6:	4770      	bx	lr
 80045f8:	803c3800 	.word	0x803c3800

080045fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004616:	d901      	bls.n	800461c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e01b      	b.n	8004654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	daf2      	bge.n	800460a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	019b      	lsls	r3, r3, #6
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3301      	adds	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004640:	d901      	bls.n	8004646 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e006      	b.n	8004654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b20      	cmp	r3, #32
 8004650:	d0f0      	beq.n	8004634 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004678:	d901      	bls.n	800467e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e018      	b.n	80046b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	daf2      	bge.n	800466c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2210      	movs	r2, #16
 800468e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800469c:	d901      	bls.n	80046a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e006      	b.n	80046b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d0f0      	beq.n	8004690 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	68f9      	ldr	r1, [r7, #12]
 80046d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0306 	and.w	r3, r3, #6
 8004706:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
 8004712:	e00a      	b.n	800472a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d002      	beq.n	8004720 <USB_GetDevSpeed+0x32>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b06      	cmp	r3, #6
 800471e:	d102      	bne.n	8004726 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004720:	2302      	movs	r3, #2
 8004722:	75fb      	strb	r3, [r7, #23]
 8004724:	e001      	b.n	800472a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004726:	230f      	movs	r3, #15
 8004728:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	785b      	ldrb	r3, [r3, #1]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d13a      	bne.n	80047ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	b29b      	uxth	r3, r3
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004772:	4313      	orrs	r3, r2
 8004774:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d155      	bne.n	8004838 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	791b      	ldrb	r3, [r3, #4]
 80047a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047b0:	4313      	orrs	r3, r2
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e036      	b.n	8004838 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	2101      	movs	r1, #1
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11a      	bne.n	8004838 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800481e:	430b      	orrs	r3, r1
 8004820:	4313      	orrs	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004836:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d161      	bne.n	8004928 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800487a:	d11f      	bne.n	80048bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004896:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800489a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	0151      	lsls	r1, r2, #5
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	440a      	add	r2, r1
 80048b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	2101      	movs	r1, #1
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048dc:	4013      	ands	r3, r2
 80048de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2101      	movs	r1, #1
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004900:	4013      	ands	r3, r2
 8004902:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	0159      	lsls	r1, r3, #5
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	440b      	add	r3, r1
 800491a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491e:	4619      	mov	r1, r3
 8004920:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <USB_DeactivateEndpoint+0x1b0>)
 8004922:	4013      	ands	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
 8004926:	e060      	b.n	80049ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800493a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800493e:	d11f      	bne.n	8004980 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800495a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800495e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800497e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	2101      	movs	r1, #1
 8004992:	fa01 f303 	lsl.w	r3, r1, r3
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	43db      	mvns	r3, r3
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049a0:	4013      	ands	r3, r2
 80049a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2101      	movs	r1, #1
 80049b6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	43db      	mvns	r3, r3
 80049be:	68f9      	ldr	r1, [r7, #12]
 80049c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049c4:	4013      	ands	r3, r2
 80049c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0159      	lsls	r1, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	440b      	add	r3, r1
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	4619      	mov	r1, r3
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <USB_DeactivateEndpoint+0x1b4>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	ec337800 	.word	0xec337800
 80049fc:	eff37800 	.word	0xeff37800

08004a00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08a      	sub	sp, #40	@ 0x28
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 817f 	bne.w	8004d20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d132      	bne.n	8004a90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	0151      	lsls	r1, r2, #5
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	440a      	add	r2, r1
 8004a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	0151      	lsls	r1, r2, #5
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	440a      	add	r2, r1
 8004a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a88:	0cdb      	lsrs	r3, r3, #19
 8004a8a:	04db      	lsls	r3, r3, #19
 8004a8c:	6113      	str	r3, [r2, #16]
 8004a8e:	e097      	b.n	8004bc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aaa:	0cdb      	lsrs	r3, r3, #19
 8004aac:	04db      	lsls	r3, r3, #19
 8004aae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ace:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ad2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11a      	bne.n	8004b10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d903      	bls.n	8004aee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	0151      	lsls	r1, r2, #5
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	440a      	add	r2, r1
 8004b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b0c:	6113      	str	r3, [r2, #16]
 8004b0e:	e044      	b.n	8004b9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4413      	add	r3, r2
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	8afb      	ldrh	r3, [r7, #22]
 8004b36:	04d9      	lsls	r1, r3, #19
 8004b38:	4ba4      	ldr	r3, [pc, #656]	@ (8004dcc <USB_EPStartXfer+0x3cc>)
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	0148      	lsls	r0, r1, #5
 8004b40:	69f9      	ldr	r1, [r7, #28]
 8004b42:	4401      	add	r1, r0
 8004b44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	791b      	ldrb	r3, [r3, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d122      	bne.n	8004b9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	8afb      	ldrh	r3, [r7, #22]
 8004b84:	075b      	lsls	r3, r3, #29
 8004b86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	0148      	lsls	r0, r1, #5
 8004b8e:	69f9      	ldr	r1, [r7, #28]
 8004b90:	4401      	add	r1, r0
 8004b92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b96:	4313      	orrs	r3, r2
 8004b98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	0148      	lsls	r0, r1, #5
 8004bb4:	69f9      	ldr	r1, [r7, #28]
 8004bb6:	4401      	add	r1, r0
 8004bb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d14b      	bne.n	8004c5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	791b      	ldrb	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d128      	bne.n	8004c3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d110      	bne.n	8004c1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00f      	b.n	8004c3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e166      	b.n	8004f2c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	0151      	lsls	r1, r2, #5
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	440a      	add	r2, r1
 8004c74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d015      	beq.n	8004cb2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 814e 	beq.w	8004f2c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca6:	69f9      	ldr	r1, [r7, #28]
 8004ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cac:	4313      	orrs	r3, r2
 8004cae:	634b      	str	r3, [r1, #52]	@ 0x34
 8004cb0:	e13c      	b.n	8004f2c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d110      	bne.n	8004ce4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e00f      	b.n	8004d04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68d9      	ldr	r1, [r3, #12]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781a      	ldrb	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	b298      	uxth	r0, r3
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4603      	mov	r3, r0
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f9b9 	bl	8005090 <USB_WritePacket>
 8004d1e:	e105      	b.n	8004f2c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d3a:	0cdb      	lsrs	r3, r3, #19
 8004d3c:	04db      	lsls	r3, r3, #19
 8004d3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d132      	bne.n	8004dd0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dc6:	6113      	str	r3, [r2, #16]
 8004dc8:	e062      	b.n	8004e90 <USB_EPStartXfer+0x490>
 8004dca:	bf00      	nop
 8004dcc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d123      	bne.n	8004e20 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dee:	69b9      	ldr	r1, [r7, #24]
 8004df0:	0148      	lsls	r0, r1, #5
 8004df2:	69f9      	ldr	r1, [r7, #28]
 8004df4:	4401      	add	r1, r0
 8004df6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e1c:	6113      	str	r3, [r2, #16]
 8004e1e:	e037      	b.n	8004e90 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	1e5a      	subs	r2, r3, #1
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	8afa      	ldrh	r2, [r7, #22]
 8004e3c:	fb03 f202 	mul.w	r2, r3, r2
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	8afb      	ldrh	r3, [r7, #22]
 8004e54:	04d9      	lsls	r1, r3, #19
 8004e56:	4b38      	ldr	r3, [pc, #224]	@ (8004f38 <USB_EPStartXfer+0x538>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	0148      	lsls	r0, r1, #5
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	4401      	add	r1, r0
 8004e62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	0148      	lsls	r0, r1, #5
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	4401      	add	r1, r0
 8004e88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10d      	bne.n	8004eb2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eae:	460a      	mov	r2, r1
 8004eb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	791b      	ldrb	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d128      	bne.n	8004f0c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d110      	bne.n	8004eec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00f      	b.n	8004f0c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	1ff80000 	.word	0x1ff80000

08004f3c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d14a      	bne.n	8004ff0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f72:	f040 8086 	bne.w	8005082 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f98:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d902      	bls.n	8004fd4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd2:	e056      	b.n	8005082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fec:	d0e7      	beq.n	8004fbe <USB_EPStopXfer+0x82>
 8004fee:	e048      	b.n	8005082 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005008:	d13b      	bne.n	8005082 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005028:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800502c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800504c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3301      	adds	r3, #1
 8005056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800505e:	4293      	cmp	r3, r2
 8005060:	d902      	bls.n	8005068 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
          break;
 8005066:	e00c      	b.n	8005082 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800507c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005080:	d0e7      	beq.n	8005052 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	@ 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	460b      	mov	r3, r1
 80050a0:	71fb      	strb	r3, [r7, #7]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d123      	bne.n	80050fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050b6:	88bb      	ldrh	r3, [r7, #4]
 80050b8:	3303      	adds	r3, #3
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e018      	b.n	80050f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	031a      	lsls	r2, r3, #12
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	3301      	adds	r3, #1
 80050e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3301      	adds	r3, #1
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3e2      	bcc.n	80050c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3724      	adds	r7, #36	@ 0x24
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800510c:	b480      	push	{r7}
 800510e:	b08b      	sub	sp, #44	@ 0x2c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	089b      	lsrs	r3, r3, #2
 8005126:	b29b      	uxth	r3, r3
 8005128:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	e014      	b.n	8005162 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	601a      	str	r2, [r3, #0]
    pDest++;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	3301      	adds	r3, #1
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	3301      	adds	r3, #1
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	3301      	adds	r3, #1
 8005160:	623b      	str	r3, [r7, #32]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	429a      	cmp	r2, r3
 8005168:	d3e6      	bcc.n	8005138 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800516a:	8bfb      	ldrh	r3, [r7, #30]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01e      	beq.n	80051ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517a:	461a      	mov	r2, r3
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
 8005190:	b2da      	uxtb	r2, r3
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	701a      	strb	r2, [r3, #0]
      i++;
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	3301      	adds	r3, #1
 800519a:	623b      	str	r3, [r7, #32]
      pDest++;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051a8:	8bfb      	ldrh	r3, [r7, #30]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ea      	bne.n	8005184 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	372c      	adds	r7, #44	@ 0x2c
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d12c      	bne.n	8005232 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	db12      	blt.n	8005210 <USB_EPSetStall+0x54>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00f      	beq.n	8005210 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800520a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800520e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	e02b      	b.n	800528a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	db12      	blt.n	800526a <USB_EPSetStall+0xae>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005264:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005268:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005288:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d128      	bne.n	8005306 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d003      	beq.n	80052e4 <USB_EPClearStall+0x4c>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	791b      	ldrb	r3, [r3, #4]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d138      	bne.n	8005356 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e027      	b.n	8005356 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005320:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005324:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	791b      	ldrb	r3, [r3, #4]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d003      	beq.n	8005336 <USB_EPClearStall+0x9e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	791b      	ldrb	r3, [r3, #4]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d10f      	bne.n	8005356 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	440a      	add	r2, r1
 800534c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005382:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005386:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053de:	f023 0302 	bic.w	r3, r3, #2
 80053e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005420:	f043 0302 	orr.w	r3, r3, #2
 8005424:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800544c:	68fb      	ldr	r3, [r7, #12]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	0c1b      	lsrs	r3, r3, #16
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	b29b      	uxth	r3, r3
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4013      	ands	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f0:	68bb      	ldr	r3, [r7, #8]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054fe:	b480      	push	{r7}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	b2db      	uxtb	r3, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4013      	ands	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800554c:	68bb      	ldr	r3, [r7, #8]
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0301 	and.w	r3, r3, #1
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005590:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005594:	f023 0307 	bic.w	r3, r3, #7
 8005598:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	460b      	mov	r3, r1
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	333c      	adds	r3, #60	@ 0x3c
 80055d2:	3304      	adds	r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4a26      	ldr	r2, [pc, #152]	@ (8005674 <USB_EP0_OutStart+0xb8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d90a      	bls.n	80055f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f0:	d101      	bne.n	80055f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e037      	b.n	8005666 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fc:	461a      	mov	r2, r3
 80055fe:	2300      	movs	r3, #0
 8005600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005610:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005624:	f043 0318 	orr.w	r3, r3, #24
 8005628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005638:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800563c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800563e:	7afb      	ldrb	r3, [r7, #11]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10f      	bne.n	8005664 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800565e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005662:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	4f54300a 	.word	0x4f54300a

08005678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005690:	d901      	bls.n	8005696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e01b      	b.n	80056ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	daf2      	bge.n	8005684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f043 0201 	orr.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056ba:	d901      	bls.n	80056c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d0f0      	beq.n	80056ae <USB_CoreReset+0x36>

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80056e8:	2010      	movs	r0, #16
 80056ea:	f002 f92b 	bl	8007944 <USBD_static_malloc>
 80056ee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	32b0      	adds	r2, #176	@ 0xb0
 8005700:	2100      	movs	r1, #0
 8005702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005706:	2302      	movs	r3, #2
 8005708:	e048      	b.n	800579c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	32b0      	adds	r2, #176	@ 0xb0
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	32b0      	adds	r2, #176	@ 0xb0
 8005724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7c1b      	ldrb	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005736:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <USBD_HID_Init+0xc8>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3326      	adds	r3, #38	@ 0x26
 800574c:	2207      	movs	r2, #7
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e00c      	b.n	800576c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005752:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <USBD_HID_Init+0xc8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	3326      	adds	r3, #38	@ 0x26
 8005768:	220a      	movs	r2, #10
 800576a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800576c:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <USBD_HID_Init+0xc8>)
 800576e:	7819      	ldrb	r1, [r3, #0]
 8005770:	2304      	movs	r3, #4
 8005772:	2203      	movs	r2, #3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f001 ffd4 	bl	8007722 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <USBD_HID_Init+0xc8>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f003 020f 	and.w	r2, r3, #15
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	3324      	adds	r3, #36	@ 0x24
 8005790:	2201      	movs	r2, #1
 8005792:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	200000d6 	.word	0x200000d6

080057a8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80057b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <USBD_HID_DeInit+0x8c>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 ffd7 	bl	800776e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <USBD_HID_DeInit+0x8c>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3324      	adds	r3, #36	@ 0x24
 80057d6:	2200      	movs	r2, #0
 80057d8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <USBD_HID_DeInit+0x8c>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f003 020f 	and.w	r2, r3, #15
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3326      	adds	r3, #38	@ 0x26
 80057f0:	2200      	movs	r2, #0
 80057f2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	32b0      	adds	r2, #176	@ 0xb0
 80057fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	32b0      	adds	r2, #176	@ 0xb0
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	4618      	mov	r0, r3
 8005816:	f002 f8a3 	bl	8007960 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	32b0      	adds	r2, #176	@ 0xb0
 8005824:	2100      	movs	r1, #0
 8005826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	200000d6 	.word	0x200000d6

08005838 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	32b0      	adds	r2, #176	@ 0xb0
 800584c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005850:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005860:	2303      	movs	r3, #3
 8005862:	e0e8      	b.n	8005a36 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800586c:	2b00      	cmp	r3, #0
 800586e:	d046      	beq.n	80058fe <USBD_HID_Setup+0xc6>
 8005870:	2b20      	cmp	r3, #32
 8005872:	f040 80d8 	bne.w	8005a26 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	785b      	ldrb	r3, [r3, #1]
 800587a:	3b02      	subs	r3, #2
 800587c:	2b09      	cmp	r3, #9
 800587e:	d836      	bhi.n	80058ee <USBD_HID_Setup+0xb6>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <USBD_HID_Setup+0x50>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058df 	.word	0x080058df
 800588c:	080058bf 	.word	0x080058bf
 8005890:	080058ef 	.word	0x080058ef
 8005894:	080058ef 	.word	0x080058ef
 8005898:	080058ef 	.word	0x080058ef
 800589c:	080058ef 	.word	0x080058ef
 80058a0:	080058ef 	.word	0x080058ef
 80058a4:	080058ef 	.word	0x080058ef
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058b1 	.word	0x080058b1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	885b      	ldrh	r3, [r3, #2]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]
          break;
 80058bc:	e01e      	b.n	80058fc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fbe5 	bl	8007094 <USBD_CtlSendData>
          break;
 80058ca:	e017      	b.n	80058fc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	885b      	ldrh	r3, [r3, #2]
 80058d0:	0a1b      	lsrs	r3, r3, #8
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	605a      	str	r2, [r3, #4]
          break;
 80058dc:	e00e      	b.n	80058fc <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2201      	movs	r2, #1
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fbd4 	bl	8007094 <USBD_CtlSendData>
          break;
 80058ec:	e006      	b.n	80058fc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fb52 	bl	8006f9a <USBD_CtlError>
          ret = USBD_FAIL;
 80058f6:	2303      	movs	r3, #3
 80058f8:	75fb      	strb	r3, [r7, #23]
          break;
 80058fa:	bf00      	nop
      }
      break;
 80058fc:	e09a      	b.n	8005a34 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	785b      	ldrb	r3, [r3, #1]
 8005902:	2b0b      	cmp	r3, #11
 8005904:	f200 8086 	bhi.w	8005a14 <USBD_HID_Setup+0x1dc>
 8005908:	a201      	add	r2, pc, #4	@ (adr r2, 8005910 <USBD_HID_Setup+0xd8>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005941 	.word	0x08005941
 8005914:	08005a23 	.word	0x08005a23
 8005918:	08005a15 	.word	0x08005a15
 800591c:	08005a15 	.word	0x08005a15
 8005920:	08005a15 	.word	0x08005a15
 8005924:	08005a15 	.word	0x08005a15
 8005928:	0800596b 	.word	0x0800596b
 800592c:	08005a15 	.word	0x08005a15
 8005930:	08005a15 	.word	0x08005a15
 8005934:	08005a15 	.word	0x08005a15
 8005938:	080059c3 	.word	0x080059c3
 800593c:	080059ed 	.word	0x080059ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b03      	cmp	r3, #3
 800594a:	d107      	bne.n	800595c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800594c:	f107 030a 	add.w	r3, r7, #10
 8005950:	2202      	movs	r2, #2
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fb9d 	bl	8007094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800595a:	e063      	b.n	8005a24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 fb1b 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	75fb      	strb	r3, [r7, #23]
          break;
 8005968:	e05c      	b.n	8005a24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	885b      	ldrh	r3, [r3, #2]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	d108      	bne.n	8005988 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b4a      	cmp	r3, #74	@ 0x4a
 800597c:	bf28      	it	cs
 800597e:	234a      	movcs	r3, #74	@ 0x4a
 8005980:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005982:	4b2f      	ldr	r3, [pc, #188]	@ (8005a40 <USBD_HID_Setup+0x208>)
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	e015      	b.n	80059b4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	885b      	ldrh	r3, [r3, #2]
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b21      	cmp	r3, #33	@ 0x21
 8005992:	d108      	bne.n	80059a6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005994:	4b2b      	ldr	r3, [pc, #172]	@ (8005a44 <USBD_HID_Setup+0x20c>)
 8005996:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	88db      	ldrh	r3, [r3, #6]
 800599c:	2b09      	cmp	r3, #9
 800599e:	bf28      	it	cs
 80059a0:	2309      	movcs	r3, #9
 80059a2:	82bb      	strh	r3, [r7, #20]
 80059a4:	e006      	b.n	80059b4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 faf6 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80059ae:	2303      	movs	r3, #3
 80059b0:	75fb      	strb	r3, [r7, #23]
            break;
 80059b2:	e037      	b.n	8005a24 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80059b4:	8abb      	ldrh	r3, [r7, #20]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6939      	ldr	r1, [r7, #16]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 fb6a 	bl	8007094 <USBD_CtlSendData>
          break;
 80059c0:	e030      	b.n	8005a24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d107      	bne.n	80059de <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3308      	adds	r3, #8
 80059d2:	2201      	movs	r2, #1
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fb5c 	bl	8007094 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059dc:	e022      	b.n	8005a24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fada 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ea:	e01b      	b.n	8005a24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d106      	bne.n	8005a06 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	885b      	ldrh	r3, [r3, #2]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a04:	e00e      	b.n	8005a24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fac6 	bl	8006f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	75fb      	strb	r3, [r7, #23]
          break;
 8005a12:	e007      	b.n	8005a24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fabf 	bl	8006f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a20:	e000      	b.n	8005a24 <USBD_HID_Setup+0x1ec>
          break;
 8005a22:	bf00      	nop
      }
      break;
 8005a24:	e006      	b.n	8005a34 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fab6 	bl	8006f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	75fb      	strb	r3, [r7, #23]
      break;
 8005a32:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000008c 	.word	0x2000008c
 8005a44:	20000074 	.word	0x20000074

08005a48 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	32b0      	adds	r2, #176	@ 0xb0
 8005a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a64:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e014      	b.n	8005a9a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d10d      	bne.n	8005a98 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	7b1b      	ldrb	r3, [r3, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2201      	movs	r2, #1
 8005a88:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <USBD_HID_SendReport+0x5c>)
 8005a8c:	7819      	ldrb	r1, [r3, #0]
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f001 ff13 	bl	80078be <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200000d6 	.word	0x200000d6

08005aa8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ab0:	2181      	movs	r1, #129	@ 0x81
 8005ab2:	4809      	ldr	r0, [pc, #36]	@ (8005ad8 <USBD_HID_GetFSCfgDesc+0x30>)
 8005ab4:	f000 fc3b 	bl	800632e <USBD_GetEpDesc>
 8005ab8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	220a      	movs	r2, #10
 8005ac4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2222      	movs	r2, #34	@ 0x22
 8005aca:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005acc:	4b02      	ldr	r3, [pc, #8]	@ (8005ad8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000050 	.word	0x20000050

08005adc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ae4:	2181      	movs	r1, #129	@ 0x81
 8005ae6:	4809      	ldr	r0, [pc, #36]	@ (8005b0c <USBD_HID_GetHSCfgDesc+0x30>)
 8005ae8:	f000 fc21 	bl	800632e <USBD_GetEpDesc>
 8005aec:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2207      	movs	r2, #7
 8005af8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2222      	movs	r2, #34	@ 0x22
 8005afe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005b00:	4b02      	ldr	r3, [pc, #8]	@ (8005b0c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000050 	.word	0x20000050

08005b10 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005b18:	2181      	movs	r1, #129	@ 0x81
 8005b1a:	4809      	ldr	r0, [pc, #36]	@ (8005b40 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005b1c:	f000 fc07 	bl	800632e <USBD_GetEpDesc>
 8005b20:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2222      	movs	r2, #34	@ 0x22
 8005b32:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005b34:	4b02      	ldr	r3, [pc, #8]	@ (8005b40 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000050 	.word	0x20000050

08005b44 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32b0      	adds	r2, #176	@ 0xb0
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005b7e:	4b03      	ldr	r3, [pc, #12]	@ (8005b8c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000080 	.word	0x20000080

08005b90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e01f      	b.n	8005be8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	79fa      	ldrb	r2, [r7, #7]
 8005bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f001 fd39 	bl	8007654 <USBD_LL_Init>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e025      	b.n	8005c54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32ae      	adds	r2, #174	@ 0xae
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32ae      	adds	r2, #174	@ 0xae
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	f107 020e 	add.w	r2, r7, #14
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fd41 	bl	80076ec <USBD_LL_Start>
 8005c6a:	4603      	mov	r3, r0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	4798      	blx	r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 f90c 	bl	8006f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d01a      	beq.n	8005d68 <USBD_LL_SetupStage+0x72>
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d822      	bhi.n	8005d7c <USBD_LL_SetupStage+0x86>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <USBD_LL_SetupStage+0x4a>
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d00a      	beq.n	8005d54 <USBD_LL_SetupStage+0x5e>
 8005d3e:	e01d      	b.n	8005d7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb63 	bl	8006414 <USBD_StdDevReq>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
      break;
 8005d52:	e020      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fbcb 	bl	80064f8 <USBD_StdItfReq>
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
      break;
 8005d66:	e016      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fc2d 	bl	80065d0 <USBD_StdEPReq>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7a:	e00c      	b.n	8005d96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fd0e 	bl	80077ac <USBD_LL_StallEP>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	bf00      	nop
  }

  return ret;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	460b      	mov	r3, r1
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005db2:	7afb      	ldrb	r3, [r7, #11]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d16e      	bne.n	8005e96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	f040 8098 	bne.w	8005efc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d913      	bls.n	8005e00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bf28      	it	cs
 8005df2:	4613      	movcs	r3, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f001 f977 	bl	80070ec <USBD_CtlContinueRx>
 8005dfe:	e07d      	b.n	8005efc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d014      	beq.n	8005e38 <USBD_LL_DataOutStage+0x98>
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d81d      	bhi.n	8005e4e <USBD_LL_DataOutStage+0xae>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <USBD_LL_DataOutStage+0x7c>
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d003      	beq.n	8005e22 <USBD_LL_DataOutStage+0x82>
 8005e1a:	e018      	b.n	8005e4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e20:	e018      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fa64 	bl	80062fa <USBD_CoreFindIF>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75bb      	strb	r3, [r7, #22]
            break;
 8005e36:	e00d      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fa66 	bl	8006314 <USBD_CoreFindEP>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e4c:	e002      	b.n	8005e54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75bb      	strb	r3, [r7, #22]
            break;
 8005e52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e54:	7dbb      	ldrb	r3, [r7, #22]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d119      	bne.n	8005e8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d113      	bne.n	8005e8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e66:	7dba      	ldrb	r2, [r7, #22]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	32ae      	adds	r2, #174	@ 0xae
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e76:	7dba      	ldrb	r2, [r7, #22]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e7e:	7dba      	ldrb	r2, [r7, #22]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	32ae      	adds	r2, #174	@ 0xae
 8005e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f001 f93d 	bl	800710e <USBD_CtlSendStatus>
 8005e94:	e032      	b.n	8005efc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fa37 	bl	8006314 <USBD_CoreFindEP>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eaa:	7dbb      	ldrb	r3, [r7, #22]
 8005eac:	2bff      	cmp	r3, #255	@ 0xff
 8005eae:	d025      	beq.n	8005efc <USBD_LL_DataOutStage+0x15c>
 8005eb0:	7dbb      	ldrb	r3, [r7, #22]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d122      	bne.n	8005efc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d117      	bne.n	8005ef2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ec2:	7dba      	ldrb	r2, [r7, #22]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	32ae      	adds	r2, #174	@ 0xae
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ed2:	7dba      	ldrb	r2, [r7, #22]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005eda:	7dba      	ldrb	r2, [r7, #22]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	32ae      	adds	r2, #174	@ 0xae
 8005ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	7afa      	ldrb	r2, [r7, #11]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	e000      	b.n	8005efe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f14:	7afb      	ldrb	r3, [r7, #11]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d16f      	bne.n	8005ffa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d15a      	bne.n	8005fe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d914      	bls.n	8005f60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f001 f8bc 	bl	80070ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fcd1 	bl	8007900 <USBD_LL_PrepareReceive>
 8005f5e:	e03f      	b.n	8005fe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d11c      	bne.n	8005fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d316      	bcc.n	8005fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d20f      	bcs.n	8005fa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 f89d 	bl	80070ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 fcae 	bl	8007900 <USBD_LL_PrepareReceive>
 8005fa4:	e01c      	b.n	8005fe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d10f      	bne.n	8005fd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 fbe9 	bl	80077ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 f8aa 	bl	8007134 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d03a      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fe42 	bl	8005c74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ff8:	e032      	b.n	8006060 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f985 	bl	8006314 <USBD_CoreFindEP>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	2bff      	cmp	r3, #255	@ 0xff
 8006012:	d025      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d122      	bne.n	8006060 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d11c      	bne.n	8006060 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006026:	7dfa      	ldrb	r2, [r7, #23]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	32ae      	adds	r2, #174	@ 0xae
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d014      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006036:	7dfa      	ldrb	r2, [r7, #23]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800603e:	7dfa      	ldrb	r2, [r7, #23]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	32ae      	adds	r2, #174	@ 0xae
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	7afa      	ldrb	r2, [r7, #11]
 800604c:	4611      	mov	r1, r2
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
 8006052:	4603      	mov	r3, r0
 8006054:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800605c:	7dbb      	ldrb	r3, [r7, #22]
 800605e:	e000      	b.n	8006062 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6852      	ldr	r2, [r2, #4]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	4611      	mov	r1, r2
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060d0:	2340      	movs	r3, #64	@ 0x40
 80060d2:	2200      	movs	r2, #0
 80060d4:	2100      	movs	r1, #0
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fb23 	bl	8007722 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	@ 0x40
 80060e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	2200      	movs	r2, #0
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fb15 	bl	8007722 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2240      	movs	r2, #64	@ 0x40
 8006102:	621a      	str	r2, [r3, #32]

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	78fa      	ldrb	r2, [r7, #3]
 800611e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b04      	cmp	r3, #4
 8006140:	d006      	beq.n	8006150 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006148:	b2da      	uxtb	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b04      	cmp	r3, #4
 8006178:	d106      	bne.n	8006188 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006180:	b2da      	uxtb	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d110      	bne.n	80061cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32ae      	adds	r2, #174	@ 0xae
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01c      	b.n	8006232 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d115      	bne.n	8006230 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	32ae      	adds	r2, #174	@ 0xae
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32ae      	adds	r2, #174	@ 0xae
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4611      	mov	r1, r2
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32ae      	adds	r2, #174	@ 0xae
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006258:	2303      	movs	r3, #3
 800625a:	e01c      	b.n	8006296 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d115      	bne.n	8006294 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	32ae      	adds	r2, #174	@ 0xae
 8006272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	@ 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	4611      	mov	r1, r2
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	4611      	mov	r1, r2
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062ec:	2303      	movs	r3, #3
 80062ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006306:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006320:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	885b      	ldrh	r3, [r3, #2]
 800634a:	b29b      	uxth	r3, r3
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	4293      	cmp	r3, r2
 8006352:	d91f      	bls.n	8006394 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800635a:	e013      	b.n	8006384 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800635c:	f107 030a 	add.w	r3, r7, #10
 8006360:	4619      	mov	r1, r3
 8006362:	6978      	ldr	r0, [r7, #20]
 8006364:	f000 f81b 	bl	800639e <USBD_GetNextDesc>
 8006368:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b05      	cmp	r3, #5
 8006370:	d108      	bne.n	8006384 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	789b      	ldrb	r3, [r3, #2]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	429a      	cmp	r2, r3
 800637e:	d008      	beq.n	8006392 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006380:	2300      	movs	r3, #0
 8006382:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	b29a      	uxth	r2, r3
 800638a:	897b      	ldrh	r3, [r7, #10]
 800638c:	429a      	cmp	r2, r3
 800638e:	d8e5      	bhi.n	800635c <USBD_GetEpDesc+0x2e>
 8006390:	e000      	b.n	8006394 <USBD_GetEpDesc+0x66>
          break;
 8006392:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006394:	693b      	ldr	r3, [r7, #16]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800639e:	b480      	push	{r7}
 80063a0:	b085      	sub	sp, #20
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3301      	adds	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063f4:	8a3b      	ldrh	r3, [r7, #16]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	b21a      	sxth	r2, r3
 80063fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063fe:	4313      	orrs	r3, r2
 8006400:	b21b      	sxth	r3, r3
 8006402:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006404:	89fb      	ldrh	r3, [r7, #14]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d005      	beq.n	800643a <USBD_StdDevReq+0x26>
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d857      	bhi.n	80064e2 <USBD_StdDevReq+0xce>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <USBD_StdDevReq+0x42>
 8006436:	2b20      	cmp	r3, #32
 8006438:	d153      	bne.n	80064e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	32ae      	adds	r2, #174	@ 0xae
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
      break;
 8006454:	e04a      	b.n	80064ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d83b      	bhi.n	80064d6 <USBD_StdDevReq+0xc2>
 800645e:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <USBD_StdDevReq+0x50>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	080064b9 	.word	0x080064b9
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064d7 	.word	0x080064d7
 8006470:	080064c3 	.word	0x080064c3
 8006474:	080064d7 	.word	0x080064d7
 8006478:	08006497 	.word	0x08006497
 800647c:	0800648d 	.word	0x0800648d
 8006480:	080064d7 	.word	0x080064d7
 8006484:	080064af 	.word	0x080064af
 8006488:	080064a1 	.word	0x080064a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa3c 	bl	800690c <USBD_GetDescriptor>
          break;
 8006494:	e024      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fba1 	bl	8006be0 <USBD_SetAddress>
          break;
 800649e:	e01f      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fbe0 	bl	8006c68 <USBD_SetConfig>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
          break;
 80064ac:	e018      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fc83 	bl	8006dbc <USBD_GetConfig>
          break;
 80064b6:	e013      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fcb4 	bl	8006e28 <USBD_GetStatus>
          break;
 80064c0:	e00e      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fce3 	bl	8006e90 <USBD_SetFeature>
          break;
 80064ca:	e009      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd07 	bl	8006ee2 <USBD_ClrFeature>
          break;
 80064d4:	e004      	b.n	80064e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd5e 	bl	8006f9a <USBD_CtlError>
          break;
 80064de:	bf00      	nop
      }
      break;
 80064e0:	e004      	b.n	80064ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd58 	bl	8006f9a <USBD_CtlError>
      break;
 80064ea:	bf00      	nop
  }

  return ret;
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop

080064f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	d005      	beq.n	800651e <USBD_StdItfReq+0x26>
 8006512:	2b40      	cmp	r3, #64	@ 0x40
 8006514:	d852      	bhi.n	80065bc <USBD_StdItfReq+0xc4>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <USBD_StdItfReq+0x26>
 800651a:	2b20      	cmp	r3, #32
 800651c:	d14e      	bne.n	80065bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	2b02      	cmp	r3, #2
 800652a:	d840      	bhi.n	80065ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	889b      	ldrh	r3, [r3, #4]
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d836      	bhi.n	80065a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	889b      	ldrh	r3, [r3, #4]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fedb 	bl	80062fa <USBD_CoreFindIF>
 8006544:	4603      	mov	r3, r0
 8006546:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2bff      	cmp	r3, #255	@ 0xff
 800654c:	d01d      	beq.n	800658a <USBD_StdItfReq+0x92>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11a      	bne.n	800658a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006554:	7bba      	ldrb	r2, [r7, #14]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32ae      	adds	r2, #174	@ 0xae
 800655a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006564:	7bba      	ldrb	r2, [r7, #14]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800656c:	7bba      	ldrb	r2, [r7, #14]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32ae      	adds	r2, #174	@ 0xae
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	4798      	blx	r3
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006582:	e004      	b.n	800658e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006588:	e001      	b.n	800658e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800658a:	2303      	movs	r3, #3
 800658c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d110      	bne.n	80065b8 <USBD_StdItfReq+0xc0>
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10d      	bne.n	80065b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fdb6 	bl	800710e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065a2:	e009      	b.n	80065b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fcf7 	bl	8006f9a <USBD_CtlError>
          break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fcf2 	bl	8006f9a <USBD_CtlError>
          break;
 80065b6:	e000      	b.n	80065ba <USBD_StdItfReq+0xc2>
          break;
 80065b8:	bf00      	nop
      }
      break;
 80065ba:	e004      	b.n	80065c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fceb 	bl	8006f9a <USBD_CtlError>
      break;
 80065c4:	bf00      	nop
  }

  return ret;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	889b      	ldrh	r3, [r3, #4]
 80065e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d007      	beq.n	8006600 <USBD_StdEPReq+0x30>
 80065f0:	2b40      	cmp	r3, #64	@ 0x40
 80065f2:	f200 817f 	bhi.w	80068f4 <USBD_StdEPReq+0x324>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02a      	beq.n	8006650 <USBD_StdEPReq+0x80>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 817a 	bne.w	80068f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fe85 	bl	8006314 <USBD_CoreFindEP>
 800660a:	4603      	mov	r3, r0
 800660c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800660e:	7b7b      	ldrb	r3, [r7, #13]
 8006610:	2bff      	cmp	r3, #255	@ 0xff
 8006612:	f000 8174 	beq.w	80068fe <USBD_StdEPReq+0x32e>
 8006616:	7b7b      	ldrb	r3, [r7, #13]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 8170 	bne.w	80068fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800661e:	7b7a      	ldrb	r2, [r7, #13]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006626:	7b7a      	ldrb	r2, [r7, #13]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	32ae      	adds	r2, #174	@ 0xae
 800662c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8163 	beq.w	80068fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32ae      	adds	r2, #174	@ 0xae
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800664e:	e156      	b.n	80068fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785b      	ldrb	r3, [r3, #1]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d008      	beq.n	800666a <USBD_StdEPReq+0x9a>
 8006658:	2b03      	cmp	r3, #3
 800665a:	f300 8145 	bgt.w	80068e8 <USBD_StdEPReq+0x318>
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 809b 	beq.w	800679a <USBD_StdEPReq+0x1ca>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d03c      	beq.n	80066e2 <USBD_StdEPReq+0x112>
 8006668:	e13e      	b.n	80068e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d002      	beq.n	800667c <USBD_StdEPReq+0xac>
 8006676:	2b03      	cmp	r3, #3
 8006678:	d016      	beq.n	80066a8 <USBD_StdEPReq+0xd8>
 800667a:	e02c      	b.n	80066d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <USBD_StdEPReq+0xce>
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b80      	cmp	r3, #128	@ 0x80
 8006686:	d00a      	beq.n	800669e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f88d 	bl	80077ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006692:	2180      	movs	r1, #128	@ 0x80
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f889 	bl	80077ac <USBD_LL_StallEP>
 800669a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800669c:	e020      	b.n	80066e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fc7a 	bl	8006f9a <USBD_CtlError>
              break;
 80066a6:	e01b      	b.n	80066e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	885b      	ldrh	r3, [r3, #2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <USBD_StdEPReq+0xfe>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b80      	cmp	r3, #128	@ 0x80
 80066ba:	d008      	beq.n	80066ce <USBD_StdEPReq+0xfe>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f86f 	bl	80077ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fd1d 	bl	800710e <USBD_CtlSendStatus>

              break;
 80066d4:	e004      	b.n	80066e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fc5e 	bl	8006f9a <USBD_CtlError>
              break;
 80066de:	bf00      	nop
          }
          break;
 80066e0:	e107      	b.n	80068f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d002      	beq.n	80066f4 <USBD_StdEPReq+0x124>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d016      	beq.n	8006720 <USBD_StdEPReq+0x150>
 80066f2:	e04b      	b.n	800678c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <USBD_StdEPReq+0x146>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b80      	cmp	r3, #128	@ 0x80
 80066fe:	d00a      	beq.n	8006716 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f851 	bl	80077ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f84d 	bl	80077ac <USBD_LL_StallEP>
 8006712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006714:	e040      	b.n	8006798 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fc3e 	bl	8006f9a <USBD_CtlError>
              break;
 800671e:	e03b      	b.n	8006798 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	885b      	ldrh	r3, [r3, #2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d136      	bne.n	8006796 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f857 	bl	80077ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fce6 	bl	800710e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fde4 	bl	8006314 <USBD_CoreFindEP>
 800674c:	4603      	mov	r3, r0
 800674e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006750:	7b7b      	ldrb	r3, [r7, #13]
 8006752:	2bff      	cmp	r3, #255	@ 0xff
 8006754:	d01f      	beq.n	8006796 <USBD_StdEPReq+0x1c6>
 8006756:	7b7b      	ldrb	r3, [r7, #13]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11c      	bne.n	8006796 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800675c:	7b7a      	ldrb	r2, [r7, #13]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006764:	7b7a      	ldrb	r2, [r7, #13]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32ae      	adds	r2, #174	@ 0xae
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d010      	beq.n	8006796 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006774:	7b7a      	ldrb	r2, [r7, #13]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	32ae      	adds	r2, #174	@ 0xae
 800677a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800678a:	e004      	b.n	8006796 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc03 	bl	8006f9a <USBD_CtlError>
              break;
 8006794:	e000      	b.n	8006798 <USBD_StdEPReq+0x1c8>
              break;
 8006796:	bf00      	nop
          }
          break;
 8006798:	e0ab      	b.n	80068f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d002      	beq.n	80067ac <USBD_StdEPReq+0x1dc>
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d032      	beq.n	8006810 <USBD_StdEPReq+0x240>
 80067aa:	e097      	b.n	80068dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <USBD_StdEPReq+0x1f2>
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d004      	beq.n	80067c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fbed 	bl	8006f9a <USBD_CtlError>
                break;
 80067c0:	e091      	b.n	80068e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0b      	bge.n	80067e2 <USBD_StdEPReq+0x212>
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	3310      	adds	r3, #16
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4413      	add	r3, r2
 80067de:	3304      	adds	r3, #4
 80067e0:	e00b      	b.n	80067fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067e2:	7bbb      	ldrb	r3, [r7, #14]
 80067e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2202      	movs	r2, #2
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fc43 	bl	8007094 <USBD_CtlSendData>
              break;
 800680e:	e06a      	b.n	80068e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006814:	2b00      	cmp	r3, #0
 8006816:	da11      	bge.n	800683c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	f003 020f 	and.w	r2, r3, #15
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3324      	adds	r3, #36	@ 0x24
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d117      	bne.n	8006862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fbb0 	bl	8006f9a <USBD_CtlError>
                  break;
 800683a:	e054      	b.n	80068e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb9d 	bl	8006f9a <USBD_CtlError>
                  break;
 8006860:	e041      	b.n	80068e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	da0b      	bge.n	8006882 <USBD_StdEPReq+0x2b2>
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	3310      	adds	r3, #16
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	3304      	adds	r3, #4
 8006880:	e00b      	b.n	800689a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	3304      	adds	r3, #4
 800689a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <USBD_StdEPReq+0x2d8>
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	2b80      	cmp	r3, #128	@ 0x80
 80068a6:	d103      	bne.n	80068b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	e00e      	b.n	80068ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 ffb7 	bl	8007828 <USBD_LL_IsStallEP>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e002      	b.n	80068ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2202      	movs	r2, #2
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fbdd 	bl	8007094 <USBD_CtlSendData>
              break;
 80068da:	e004      	b.n	80068e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb5b 	bl	8006f9a <USBD_CtlError>
              break;
 80068e4:	bf00      	nop
          }
          break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fb55 	bl	8006f9a <USBD_CtlError>
          break;
 80068f0:	bf00      	nop
      }
      break;
 80068f2:	e005      	b.n	8006900 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fb4f 	bl	8006f9a <USBD_CtlError>
      break;
 80068fc:	e000      	b.n	8006900 <USBD_StdEPReq+0x330>
      break;
 80068fe:	bf00      	nop
  }

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	0a1b      	lsrs	r3, r3, #8
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	2b06      	cmp	r3, #6
 800692e:	f200 8128 	bhi.w	8006b82 <USBD_GetDescriptor+0x276>
 8006932:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <USBD_GetDescriptor+0x2c>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	08006955 	.word	0x08006955
 800693c:	0800696d 	.word	0x0800696d
 8006940:	080069ad 	.word	0x080069ad
 8006944:	08006b83 	.word	0x08006b83
 8006948:	08006b83 	.word	0x08006b83
 800694c:	08006b23 	.word	0x08006b23
 8006950:	08006b4f 	.word	0x08006b4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
      break;
 800696a:	e112      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7c1b      	ldrb	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	f107 0208 	add.w	r2, r7, #8
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
 8006984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	2202      	movs	r2, #2
 800698c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800698e:	e100      	b.n	8006b92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	f107 0208 	add.w	r2, r7, #8
 800699c:	4610      	mov	r0, r2
 800699e:	4798      	blx	r3
 80069a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	2202      	movs	r2, #2
 80069a8:	701a      	strb	r2, [r3, #0]
      break;
 80069aa:	e0f2      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	885b      	ldrh	r3, [r3, #2]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b05      	cmp	r3, #5
 80069b4:	f200 80ac 	bhi.w	8006b10 <USBD_GetDescriptor+0x204>
 80069b8:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <USBD_GetDescriptor+0xb4>)
 80069ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069be:	bf00      	nop
 80069c0:	080069d9 	.word	0x080069d9
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	08006a41 	.word	0x08006a41
 80069cc:	08006a75 	.word	0x08006a75
 80069d0:	08006aa9 	.word	0x08006aa9
 80069d4:	08006add 	.word	0x08006add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7c12      	ldrb	r2, [r2, #16]
 80069f0:	f107 0108 	add.w	r1, r7, #8
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fa:	e091      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 facb 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a04:	7afb      	ldrb	r3, [r7, #11]
 8006a06:	3301      	adds	r3, #1
 8006a08:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0a:	e089      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00b      	beq.n	8006a30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	7c12      	ldrb	r2, [r2, #16]
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2e:	e077      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fab1 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3e:	e06f      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	7c12      	ldrb	r2, [r2, #16]
 8006a58:	f107 0108 	add.w	r1, r7, #8
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4798      	blx	r3
 8006a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a62:	e05d      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa97 	bl	8006f9a <USBD_CtlError>
            err++;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	72fb      	strb	r3, [r7, #11]
          break;
 8006a72:	e055      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00b      	beq.n	8006a98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7c12      	ldrb	r2, [r2, #16]
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
 8006a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a96:	e043      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fa7d 	bl	8006f9a <USBD_CtlError>
            err++;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006aa6:	e03b      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	7c12      	ldrb	r2, [r2, #16]
 8006ac0:	f107 0108 	add.w	r1, r7, #8
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
 8006ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aca:	e029      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa63 	bl	8006f9a <USBD_CtlError>
            err++;
 8006ad4:	7afb      	ldrb	r3, [r7, #11]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8006ada:	e021      	b.n	8006b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	7c12      	ldrb	r2, [r2, #16]
 8006af4:	f107 0108 	add.w	r1, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006afe:	e00f      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa49 	bl	8006f9a <USBD_CtlError>
            err++;
 8006b08:	7afb      	ldrb	r3, [r7, #11]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b0e:	e007      	b.n	8006b20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa41 	bl	8006f9a <USBD_CtlError>
          err++;
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b1e:	bf00      	nop
      }
      break;
 8006b20:	e037      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	7c1b      	ldrb	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	4610      	mov	r0, r2
 8006b38:	4798      	blx	r3
 8006b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b3c:	e029      	b.n	8006b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa2a 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8006b4c:	e021      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	7c1b      	ldrb	r3, [r3, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	f107 0208 	add.w	r2, r7, #8
 8006b62:	4610      	mov	r0, r2
 8006b64:	4798      	blx	r3
 8006b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	2207      	movs	r2, #7
 8006b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b70:	e00f      	b.n	8006b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa10 	bl	8006f9a <USBD_CtlError>
        err++;
 8006b7a:	7afb      	ldrb	r3, [r7, #11]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b80:	e007      	b.n	8006b92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa08 	bl	8006f9a <USBD_CtlError>
      err++;
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b90:	bf00      	nop
  }

  if (err != 0U)
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11e      	bne.n	8006bd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	88db      	ldrh	r3, [r3, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d016      	beq.n	8006bce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00e      	beq.n	8006bc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88da      	ldrh	r2, [r3, #6]
 8006baa:	893b      	ldrh	r3, [r7, #8]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bf28      	it	cs
 8006bb0:	4613      	movcs	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bb6:	893b      	ldrh	r3, [r7, #8]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa69 	bl	8007094 <USBD_CtlSendData>
 8006bc2:	e009      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9e7 	bl	8006f9a <USBD_CtlError>
 8006bcc:	e004      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa9d 	bl	800710e <USBD_CtlSendStatus>
 8006bd4:	e000      	b.n	8006bd8 <USBD_GetDescriptor+0x2cc>
    return;
 8006bd6:	bf00      	nop
  }
}
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	889b      	ldrh	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d131      	bne.n	8006c56 <USBD_SetAddress+0x76>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12d      	bne.n	8006c56 <USBD_SetAddress+0x76>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	885b      	ldrh	r3, [r3, #2]
 8006bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c00:	d829      	bhi.n	8006c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d104      	bne.n	8006c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f9bc 	bl	8006f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c22:	e01d      	b.n	8006c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fe25 	bl	8007880 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa69 	bl	800710e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d004      	beq.n	8006c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4a:	e009      	b.n	8006c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c54:	e004      	b.n	8006c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f99e 	bl	8006f9a <USBD_CtlError>
  }
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	885b      	ldrh	r3, [r3, #2]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c80:	4b4d      	ldr	r3, [pc, #308]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d905      	bls.n	8006c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f985 	bl	8006f9a <USBD_CtlError>
    return USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e08c      	b.n	8006dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d002      	beq.n	8006ca6 <USBD_SetConfig+0x3e>
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d029      	beq.n	8006cf8 <USBD_SetConfig+0x90>
 8006ca4:	e075      	b.n	8006d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ca6:	4b44      	ldr	r3, [pc, #272]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d020      	beq.n	8006cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cae:	4b42      	ldr	r3, [pc, #264]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe ffe3 	bl	8005c8a <USBD_SetClassConfig>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f962 	bl	8006f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cde:	e065      	b.n	8006dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa14 	bl	800710e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2203      	movs	r2, #3
 8006cea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006cee:	e05d      	b.n	8006dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa0c 	bl	800710e <USBD_CtlSendStatus>
      break;
 8006cf6:	e059      	b.n	8006dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d112      	bne.n	8006d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d08:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d12:	4b29      	ldr	r3, [pc, #164]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe ffd2 	bl	8005cc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f9f5 	bl	800710e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d24:	e042      	b.n	8006dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d26:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d02a      	beq.n	8006d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fe ffc0 	bl	8005cc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d42:	4b1d      	ldr	r3, [pc, #116]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fe ff99 	bl	8005c8a <USBD_SetClassConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00f      	beq.n	8006d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f918 	bl	8006f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe ffa5 	bl	8005cc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d80:	e014      	b.n	8006dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f9c3 	bl	800710e <USBD_CtlSendStatus>
      break;
 8006d88:	e010      	b.n	8006dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9bf 	bl	800710e <USBD_CtlSendStatus>
      break;
 8006d90:	e00c      	b.n	8006dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f900 	bl	8006f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <USBD_SetConfig+0x150>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fe ff8e 	bl	8005cc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	73fb      	strb	r3, [r7, #15]
      break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	2000020c 	.word	0x2000020c

08006dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	88db      	ldrh	r3, [r3, #6]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d004      	beq.n	8006dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8e2 	bl	8006f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006dd6:	e023      	b.n	8006e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	dc02      	bgt.n	8006dea <USBD_GetConfig+0x2e>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	dc03      	bgt.n	8006df0 <USBD_GetConfig+0x34>
 8006de8:	e015      	b.n	8006e16 <USBD_GetConfig+0x5a>
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d00b      	beq.n	8006e06 <USBD_GetConfig+0x4a>
 8006dee:	e012      	b.n	8006e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f948 	bl	8007094 <USBD_CtlSendData>
        break;
 8006e04:	e00c      	b.n	8006e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f940 	bl	8007094 <USBD_CtlSendData>
        break;
 8006e14:	e004      	b.n	8006e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8be 	bl	8006f9a <USBD_CtlError>
        break;
 8006e1e:	bf00      	nop
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d81e      	bhi.n	8006e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	88db      	ldrh	r3, [r3, #6]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d004      	beq.n	8006e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8a5 	bl	8006f9a <USBD_CtlError>
        break;
 8006e50:	e01a      	b.n	8006e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f043 0202 	orr.w	r2, r3, #2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	330c      	adds	r3, #12
 8006e72:	2202      	movs	r2, #2
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f90c 	bl	8007094 <USBD_CtlSendData>
      break;
 8006e7c:	e004      	b.n	8006e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f88a 	bl	8006f9a <USBD_CtlError>
      break;
 8006e86:	bf00      	nop
  }
}
 8006e88:	bf00      	nop
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	885b      	ldrh	r3, [r3, #2]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d107      	bne.n	8006eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f92f 	bl	800710e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006eb0:	e013      	b.n	8006eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d10b      	bne.n	8006ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	889b      	ldrh	r3, [r3, #4]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f91f 	bl	800710e <USBD_CtlSendStatus>
}
 8006ed0:	e003      	b.n	8006eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f860 	bl	8006f9a <USBD_CtlError>
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d80b      	bhi.n	8006f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d10c      	bne.n	8006f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f8ff 	bl	800710e <USBD_CtlSendStatus>
      }
      break;
 8006f10:	e004      	b.n	8006f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f840 	bl	8006f9a <USBD_CtlError>
      break;
 8006f1a:	e000      	b.n	8006f1e <USBD_ClrFeature+0x3c>
      break;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781a      	ldrb	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fa40 	bl	80063d6 <SWAPBYTE>
 8006f56:	4603      	mov	r3, r0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fa33 	bl	80063d6 <SWAPBYTE>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fa26 	bl	80063d6 <SWAPBYTE>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	80da      	strh	r2, [r3, #6]
}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fa4:	2180      	movs	r1, #128	@ 0x80
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc00 	bl	80077ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fbfc 	bl	80077ac <USBD_LL_StallEP>
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d042      	beq.n	8007058 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f000 f842 	bl	8007060 <USBD_GetLen>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	3301      	adds	r3, #1
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe6:	d808      	bhi.n	8006ffa <USBD_GetString+0x3e>
 8006fe8:	6938      	ldr	r0, [r7, #16]
 8006fea:	f000 f839 	bl	8007060 <USBD_GetLen>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	e001      	b.n	8006ffe <USBD_GetString+0x42>
 8006ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4413      	add	r3, r2
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	701a      	strb	r2, [r3, #0]
  idx++;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	3301      	adds	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4413      	add	r3, r2
 800701a:	2203      	movs	r2, #3
 800701c:	701a      	strb	r2, [r3, #0]
  idx++;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	3301      	adds	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007024:	e013      	b.n	800704e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4413      	add	r3, r2
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	7812      	ldrb	r2, [r2, #0]
 8007030:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3301      	adds	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
    idx++;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	3301      	adds	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	4413      	add	r3, r2
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
    idx++;
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	3301      	adds	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e7      	bne.n	8007026 <USBD_GetString+0x6a>
 8007056:	e000      	b.n	800705a <USBD_GetString+0x9e>
    return;
 8007058:	bf00      	nop
  }
}
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007070:	e005      	b.n	800707e <USBD_GetLen+0x1e>
  {
    len++;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	3301      	adds	r3, #1
 8007076:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3301      	adds	r3, #1
 800707c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f5      	bne.n	8007072 <USBD_GetLen+0x12>
  }

  return len;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	2100      	movs	r1, #0
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fbff 	bl	80078be <USBD_LL_Transmit>

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	2100      	movs	r1, #0
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fbee 	bl	80078be <USBD_LL_Transmit>

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	2100      	movs	r1, #0
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fbfe 	bl	8007900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2204      	movs	r2, #4
 800711a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800711e:	2300      	movs	r3, #0
 8007120:	2200      	movs	r2, #0
 8007122:	2100      	movs	r1, #0
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fbca 	bl	80078be <USBD_LL_Transmit>

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2205      	movs	r2, #5
 8007140:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007144:	2300      	movs	r3, #0
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fbd8 	bl	8007900 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007160:	2200      	movs	r2, #0
 8007162:	490e      	ldr	r1, [pc, #56]	@ (800719c <MX_USB_DEVICE_Init+0x40>)
 8007164:	480e      	ldr	r0, [pc, #56]	@ (80071a0 <MX_USB_DEVICE_Init+0x44>)
 8007166:	f7fe fd13 	bl	8005b90 <USBD_Init>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007170:	f7f9 fe88 	bl	8000e84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007174:	490b      	ldr	r1, [pc, #44]	@ (80071a4 <MX_USB_DEVICE_Init+0x48>)
 8007176:	480a      	ldr	r0, [pc, #40]	@ (80071a0 <MX_USB_DEVICE_Init+0x44>)
 8007178:	f7fe fd3a 	bl	8005bf0 <USBD_RegisterClass>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007182:	f7f9 fe7f 	bl	8000e84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007186:	4806      	ldr	r0, [pc, #24]	@ (80071a0 <MX_USB_DEVICE_Init+0x44>)
 8007188:	f7fe fd68 	bl	8005c5c <USBD_Start>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007192:	f7f9 fe77 	bl	8000e84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007196:	bf00      	nop
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200000d8 	.word	0x200000d8
 80071a0:	20000210 	.word	0x20000210
 80071a4:	20000018 	.word	0x20000018

080071a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2212      	movs	r2, #18
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	@ (80071c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	200000f4 	.word	0x200000f4

080071cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2204      	movs	r2, #4
 80071dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80071de:	4b03      	ldr	r3, [pc, #12]	@ (80071ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000108 	.word	0x20000108

080071f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4907      	ldr	r1, [pc, #28]	@ (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
 8007206:	4808      	ldr	r0, [pc, #32]	@ (8007228 <USBD_FS_ProductStrDescriptor+0x38>)
 8007208:	f7ff fed8 	bl	8006fbc <USBD_GetString>
 800720c:	e004      	b.n	8007218 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4904      	ldr	r1, [pc, #16]	@ (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
 8007212:	4805      	ldr	r0, [pc, #20]	@ (8007228 <USBD_FS_ProductStrDescriptor+0x38>)
 8007214:	f7ff fed2 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007218:	4b02      	ldr	r3, [pc, #8]	@ (8007224 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	200004ec 	.word	0x200004ec
 8007228:	08007a58 	.word	0x08007a58

0800722c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	6039      	str	r1, [r7, #0]
 8007236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4904      	ldr	r1, [pc, #16]	@ (800724c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800723c:	4804      	ldr	r0, [pc, #16]	@ (8007250 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800723e:	f7ff febd 	bl	8006fbc <USBD_GetString>
  return USBD_StrDesc;
 8007242:	4b02      	ldr	r3, [pc, #8]	@ (800724c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	200004ec 	.word	0x200004ec
 8007250:	08007a64 	.word	0x08007a64

08007254 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	221a      	movs	r2, #26
 8007264:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007266:	f000 f843 	bl	80072f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800726a:	4b02      	ldr	r3, [pc, #8]	@ (8007274 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	2000010c 	.word	0x2000010c

08007278 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	4907      	ldr	r1, [pc, #28]	@ (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800728e:	4808      	ldr	r0, [pc, #32]	@ (80072b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007290:	f7ff fe94 	bl	8006fbc <USBD_GetString>
 8007294:	e004      	b.n	80072a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4904      	ldr	r1, [pc, #16]	@ (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800729a:	4805      	ldr	r0, [pc, #20]	@ (80072b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800729c:	f7ff fe8e 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80072a0:	4b02      	ldr	r3, [pc, #8]	@ (80072ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	200004ec 	.word	0x200004ec
 80072b0:	08007a78 	.word	0x08007a78

080072b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	6039      	str	r1, [r7, #0]
 80072be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d105      	bne.n	80072d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	4907      	ldr	r1, [pc, #28]	@ (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072ca:	4808      	ldr	r0, [pc, #32]	@ (80072ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072cc:	f7ff fe76 	bl	8006fbc <USBD_GetString>
 80072d0:	e004      	b.n	80072dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	4904      	ldr	r1, [pc, #16]	@ (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072d6:	4805      	ldr	r0, [pc, #20]	@ (80072ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072d8:	f7ff fe70 	bl	8006fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80072dc:	4b02      	ldr	r3, [pc, #8]	@ (80072e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	200004ec 	.word	0x200004ec
 80072ec:	08007a84 	.word	0x08007a84

080072f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007334 <Get_SerialNum+0x44>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007338 <Get_SerialNum+0x48>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007302:	4b0e      	ldr	r3, [pc, #56]	@ (800733c <Get_SerialNum+0x4c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007316:	2208      	movs	r2, #8
 8007318:	4909      	ldr	r1, [pc, #36]	@ (8007340 <Get_SerialNum+0x50>)
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f814 	bl	8007348 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007320:	2204      	movs	r2, #4
 8007322:	4908      	ldr	r1, [pc, #32]	@ (8007344 <Get_SerialNum+0x54>)
 8007324:	68b8      	ldr	r0, [r7, #8]
 8007326:	f000 f80f 	bl	8007348 <IntToUnicode>
  }
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	1fff7a10 	.word	0x1fff7a10
 8007338:	1fff7a14 	.word	0x1fff7a14
 800733c:	1fff7a18 	.word	0x1fff7a18
 8007340:	2000010e 	.word	0x2000010e
 8007344:	2000011e 	.word	0x2000011e

08007348 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
 800735e:	e027      	b.n	80073b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	0f1b      	lsrs	r3, r3, #28
 8007364:	2b09      	cmp	r3, #9
 8007366:	d80b      	bhi.n	8007380 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	0f1b      	lsrs	r3, r3, #28
 800736c:	b2da      	uxtb	r2, r3
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4619      	mov	r1, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	440b      	add	r3, r1
 8007378:	3230      	adds	r2, #48	@ 0x30
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e00a      	b.n	8007396 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	0f1b      	lsrs	r3, r3, #28
 8007384:	b2da      	uxtb	r2, r3
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	4619      	mov	r1, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	440b      	add	r3, r1
 8007390:	3237      	adds	r2, #55	@ 0x37
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	3301      	adds	r3, #1
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	3301      	adds	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
 80073b0:	7dfa      	ldrb	r2, [r7, #23]
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d3d3      	bcc.n	8007360 <IntToUnicode+0x18>
  }
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	@ 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d0:	f107 0314 	add.w	r3, r7, #20
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	605a      	str	r2, [r3, #4]
 80073da:	609a      	str	r2, [r3, #8]
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073e8:	d13a      	bne.n	8007460 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ea:	2300      	movs	r3, #0
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80073fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007406:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800740a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740c:	2302      	movs	r3, #2
 800740e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007414:	2303      	movs	r3, #3
 8007416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007418:	230a      	movs	r3, #10
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800741c:	f107 0314 	add.w	r3, r7, #20
 8007420:	4619      	mov	r1, r3
 8007422:	4812      	ldr	r0, [pc, #72]	@ (800746c <HAL_PCD_MspInit+0xa4>)
 8007424:	f7f9 ffc8 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007428:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 800742a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742c:	4a0e      	ldr	r2, [pc, #56]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 800742e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007432:	6353      	str	r3, [r2, #52]	@ 0x34
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 800743e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007442:	6453      	str	r3, [r2, #68]	@ 0x44
 8007444:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <HAL_PCD_MspInit+0xa0>)
 8007446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	2043      	movs	r0, #67	@ 0x43
 8007456:	f7f9 ff78 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800745a:	2043      	movs	r0, #67	@ 0x43
 800745c:	f7f9 ff91 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007460:	bf00      	nop
 8007462:	3728      	adds	r7, #40	@ 0x28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40023800 	.word	0x40023800
 800746c:	40020000 	.word	0x40020000

08007470 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe fc35 	bl	8005cf6 <USBD_LL_SetupStage>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	4619      	mov	r1, r3
 80074be:	f7fe fc6f 	bl	8005da0 <USBD_LL_DataOutStage>
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4613      	mov	r3, r2
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	3320      	adds	r3, #32
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f7fe fd08 	bl	8005f06 <USBD_LL_DataInStage>
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fe42 	bl	8006196 <USBD_LL_SOF>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	79db      	ldrb	r3, [r3, #7]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
 8007532:	e008      	b.n	8007546 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	79db      	ldrb	r3, [r3, #7]
 8007538:	2b02      	cmp	r3, #2
 800753a:	d102      	bne.n	8007542 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
 8007540:	e001      	b.n	8007546 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007542:	f7f9 fc9f 	bl	8000e84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800754c:	7bfa      	ldrb	r2, [r7, #15]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7fe fddc 	bl	800610e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fd84 	bl	800606a <USBD_LL_Reset>
}
 8007562:	bf00      	nop
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe fdd7 	bl	800612e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7adb      	ldrb	r3, [r3, #11]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075a0:	4b04      	ldr	r3, [pc, #16]	@ (80075b4 <HAL_PCD_SuspendCallback+0x48>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	4a03      	ldr	r2, [pc, #12]	@ (80075b4 <HAL_PCD_SuspendCallback+0x48>)
 80075a6:	f043 0306 	orr.w	r3, r3, #6
 80075aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fdcd 	bl	8006166 <USBD_LL_Resume>
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fe25 	bl	800623a <USBD_LL_IsoOUTIncomplete>
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fde1 	bl	80061d6 <USBD_LL_IsoINIncomplete>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fe37 	bl	800629e <USBD_LL_DevConnected>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fe34 	bl	80062b4 <USBD_LL_DevDisconnected>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d13c      	bne.n	80076de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007664:	4a20      	ldr	r2, [pc, #128]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a1e      	ldr	r2, [pc, #120]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007670:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007674:	4b1c      	ldr	r3, [pc, #112]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007676:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800767a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800767c:	4b1a      	ldr	r3, [pc, #104]	@ (80076e8 <USBD_LL_Init+0x94>)
 800767e:	2204      	movs	r2, #4
 8007680:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007682:	4b19      	ldr	r3, [pc, #100]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007684:	2202      	movs	r2, #2
 8007686:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007688:	4b17      	ldr	r3, [pc, #92]	@ (80076e8 <USBD_LL_Init+0x94>)
 800768a:	2200      	movs	r2, #0
 800768c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800768e:	4b16      	ldr	r3, [pc, #88]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007690:	2202      	movs	r2, #2
 8007692:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007694:	4b14      	ldr	r3, [pc, #80]	@ (80076e8 <USBD_LL_Init+0x94>)
 8007696:	2200      	movs	r2, #0
 8007698:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800769a:	4b13      	ldr	r3, [pc, #76]	@ (80076e8 <USBD_LL_Init+0x94>)
 800769c:	2200      	movs	r2, #0
 800769e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076a0:	4b11      	ldr	r3, [pc, #68]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076a6:	4b10      	ldr	r3, [pc, #64]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076ac:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076b2:	480d      	ldr	r0, [pc, #52]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076b4:	f7fa f84e 	bl	8001754 <HAL_PCD_Init>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076be:	f7f9 fbe1 	bl	8000e84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076c2:	2180      	movs	r1, #128	@ 0x80
 80076c4:	4808      	ldr	r0, [pc, #32]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076c6:	f7fb fa62 	bl	8002b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80076ca:	2240      	movs	r2, #64	@ 0x40
 80076cc:	2100      	movs	r1, #0
 80076ce:	4806      	ldr	r0, [pc, #24]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076d0:	f7fb fa16 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80076d4:	2280      	movs	r2, #128	@ 0x80
 80076d6:	2101      	movs	r1, #1
 80076d8:	4803      	ldr	r0, [pc, #12]	@ (80076e8 <USBD_LL_Init+0x94>)
 80076da:	f7fb fa11 	bl	8002b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200006ec 	.word	0x200006ec

080076ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007702:	4618      	mov	r0, r3
 8007704:	f7fa f935 	bl	8001972 <HAL_PCD_Start>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f930 	bl	8007974 <USBD_Get_USB_Status>
 8007714:	4603      	mov	r3, r0
 8007716:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007718:	7bbb      	ldrb	r3, [r7, #14]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	461a      	mov	r2, r3
 8007730:	4603      	mov	r3, r0
 8007732:	70fb      	strb	r3, [r7, #3]
 8007734:	460b      	mov	r3, r1
 8007736:	70bb      	strb	r3, [r7, #2]
 8007738:	4613      	mov	r3, r2
 800773a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800774a:	78bb      	ldrb	r3, [r7, #2]
 800774c:	883a      	ldrh	r2, [r7, #0]
 800774e:	78f9      	ldrb	r1, [r7, #3]
 8007750:	f7fa fe09 	bl	8002366 <HAL_PCD_EP_Open>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 f90a 	bl	8007974 <USBD_Get_USB_Status>
 8007760:	4603      	mov	r3, r0
 8007762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007764:	7bbb      	ldrb	r3, [r7, #14]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	4611      	mov	r1, r2
 800778c:	4618      	mov	r0, r3
 800778e:	f7fa fe54 	bl	800243a <HAL_PCD_EP_Close>
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f8eb 	bl	8007974 <USBD_Get_USB_Status>
 800779e:	4603      	mov	r3, r0
 80077a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa fef4 	bl	80025b8 <HAL_PCD_EP_SetStall>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f8cc 	bl	8007974 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fa ff38 	bl	800267e <HAL_PCD_EP_ClrStall>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f8ad 	bl	8007974 <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800783a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800783c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da0b      	bge.n	800785c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3316      	adds	r3, #22
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	e00b      	b.n	8007874 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	4613      	mov	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	440b      	add	r3, r1
 800786e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007872:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fa fd3d 	bl	800231e <HAL_PCD_SetAddress>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f862 	bl	8007974 <USBD_Get_USB_Status>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b086      	sub	sp, #24
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
 80078ca:	460b      	mov	r3, r1
 80078cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80078dc:	7af9      	ldrb	r1, [r7, #11]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	f7fa fe2f 	bl	8002544 <HAL_PCD_EP_Transmit>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 f841 	bl	8007974 <USBD_Get_USB_Status>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	460b      	mov	r3, r1
 800790e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800791e:	7af9      	ldrb	r1, [r7, #11]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	f7fa fdd3 	bl	80024ce <HAL_PCD_EP_Receive>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f820 	bl	8007974 <USBD_Get_USB_Status>
 8007934:	4603      	mov	r3, r0
 8007936:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007938:	7dbb      	ldrb	r3, [r7, #22]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800794c:	4b03      	ldr	r3, [pc, #12]	@ (800795c <USBD_static_malloc+0x18>)
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000bd0 	.word	0x20000bd0

08007960 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d817      	bhi.n	80079b8 <USBD_Get_USB_Status+0x44>
 8007988:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <USBD_Get_USB_Status+0x1c>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079a7 	.word	0x080079a7
 8007998:	080079ad 	.word	0x080079ad
 800799c:	080079b3 	.word	0x080079b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
    break;
 80079a4:	e00b      	b.n	80079be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	73fb      	strb	r3, [r7, #15]
    break;
 80079aa:	e008      	b.n	80079be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
    break;
 80079b0:	e005      	b.n	80079be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	73fb      	strb	r3, [r7, #15]
    break;
 80079b6:	e002      	b.n	80079be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	73fb      	strb	r3, [r7, #15]
    break;
 80079bc:	bf00      	nop
  }
  return usb_status;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <memset>:
 80079cc:	4402      	add	r2, r0
 80079ce:	4603      	mov	r3, r0
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d100      	bne.n	80079d6 <memset+0xa>
 80079d4:	4770      	bx	lr
 80079d6:	f803 1b01 	strb.w	r1, [r3], #1
 80079da:	e7f9      	b.n	80079d0 <memset+0x4>

080079dc <__libc_init_array>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	4d0d      	ldr	r5, [pc, #52]	@ (8007a14 <__libc_init_array+0x38>)
 80079e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007a18 <__libc_init_array+0x3c>)
 80079e2:	1b64      	subs	r4, r4, r5
 80079e4:	10a4      	asrs	r4, r4, #2
 80079e6:	2600      	movs	r6, #0
 80079e8:	42a6      	cmp	r6, r4
 80079ea:	d109      	bne.n	8007a00 <__libc_init_array+0x24>
 80079ec:	4d0b      	ldr	r5, [pc, #44]	@ (8007a1c <__libc_init_array+0x40>)
 80079ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007a20 <__libc_init_array+0x44>)
 80079f0:	f000 f826 	bl	8007a40 <_init>
 80079f4:	1b64      	subs	r4, r4, r5
 80079f6:	10a4      	asrs	r4, r4, #2
 80079f8:	2600      	movs	r6, #0
 80079fa:	42a6      	cmp	r6, r4
 80079fc:	d105      	bne.n	8007a0a <__libc_init_array+0x2e>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a04:	4798      	blx	r3
 8007a06:	3601      	adds	r6, #1
 8007a08:	e7ee      	b.n	80079e8 <__libc_init_array+0xc>
 8007a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0e:	4798      	blx	r3
 8007a10:	3601      	adds	r6, #1
 8007a12:	e7f2      	b.n	80079fa <__libc_init_array+0x1e>
 8007a14:	08007aac 	.word	0x08007aac
 8007a18:	08007aac 	.word	0x08007aac
 8007a1c:	08007aac 	.word	0x08007aac
 8007a20:	08007ab0 	.word	0x08007ab0

08007a24 <memcpy>:
 8007a24:	440a      	add	r2, r1
 8007a26:	4291      	cmp	r1, r2
 8007a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a2c:	d100      	bne.n	8007a30 <memcpy+0xc>
 8007a2e:	4770      	bx	lr
 8007a30:	b510      	push	{r4, lr}
 8007a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	d1f9      	bne.n	8007a32 <memcpy+0xe>
 8007a3e:	bd10      	pop	{r4, pc}

08007a40 <_init>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr

08007a4c <_fini>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr
